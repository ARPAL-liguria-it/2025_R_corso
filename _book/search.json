[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduzione",
    "section": "",
    "text": "1.1 Quanta fatica\nL’utilizzo di un linguaggio di programmazione richiede un importante investimento iniziale per apprendere le basi del linguaggio, le funzioni principali e il loro campo di applicabilità. Tuttavia, le energie spese sono ripagate dalla possibilità di poter riutilizzare, adattare il codice e poter ripetere l’analisi con relativamente poco sforzo, rendendo l’intero processo riproducibile e documentabile.\nIn aggiunta, l’apprendimento di un linguaggio di programmazione permette di aprire numerose porte, talvolta semplificando il lavoro quotidiano in molti campi. Infatti, volendo solo citare una parte delle cose che si possono fare con R, non è difficile ottenere:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduzione</span>"
    ]
  },
  {
    "objectID": "intro.html#quanta-fatica",
    "href": "intro.html#quanta-fatica",
    "title": "1  Introduzione",
    "section": "",
    "text": "documenti dinamici parametrizzati;\napplicazioni interattive accessibili attraverso un browser;\ninterfacce di programmazione di applicazioni (API) per l’esecuzione di funzioni da remoto.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduzione</span>"
    ]
  },
  {
    "objectID": "intro.html#prerequisiti",
    "href": "intro.html#prerequisiti",
    "title": "1  Introduzione",
    "section": "1.2 Prerequisiti",
    "text": "1.2 Prerequisiti\nIl corso può essere seguito da qualunque persona con una certa dimestichezza con i computer e con la logica di base. Il candidato ideale dovrebbe aver già svolto qualche analisi su dati numerici, utilizzando strumenti statistici di base e fogli di calcolo. La conoscenza di un linguaggio di programmazione diverso da R non è richiesta ma sicuramente aiuta.\nL’esecuzione del codice presentato all’interno del corso richiede l’installazione di R, RStudio e dei pacchetti data.table, ggplot2, glue e gt.\n\n1.2.1 R\nIl download di R può essere eseguito dal comprensive R archive network (CRAN), seguendo le istruzioni relative al proprio sistema operativo. Ogni anno viene rilasciata una nuova versione e circa tre nuove versioni minori: se si intende usare R con regolarità è consigliato mantenere l’applicativo aggiornato.\nSi tratta di un software libero, rilasciato con un mix di licenze GNU General Public License v2 e v3 e GNU Lesser General Public License v2.1.\n\n\n1.2.2 RStudio\nRStudio è l’ambiente integrato di sviluppo (IDE) attualmente maggiormente utilizzato con R: permette la gestione completa di un progetto, la connessione a sorgenti di dati esterni, quali database, e l’integrazione con sistemi di gestione delle versioni come git. L’applicazione può essere scaricata dal sito dello sviluppatore Posit.\nSi tratta di un software libero rilasciato con licenza GNU Affero General Public License v3.\n\n\n\n\n\n\n\n\nFigura 1.1: Schermata di RStudio: in alto, da sinistra a destra, si trova il pannello dedicato al codice sorgente, al suo fianco il pannello dedicato agli ambienti e allo storico. In basso, da sinistra a destra, si trova la console e il pannello dedicato agli output.\n\n\n\n\n\nL’utilizzo di RStudio o di un IDE non è strettamente necessario per l’utilizzo di R, tuttavia semplifica di molto il suo utilizzo. Altri IDE comunemente utilizzati con R sono VScode, Vim ed Emacs.\n\n\n1.2.3 I pacchetti di R\nLe funzionalità offerte da R possono essere espanse ricorrendo a pacchetti. La lista completa, estremamente lunga e variegata, è presente sul sito del CRAN. Alcuni di questi pacchetti sono sviluppati a livello amatoriale, altri da statistici e ingegneri del software di primissimo piano a livello mondiale. Tutte le funzioni e i dati presenti in un pacchetto sono documentati, il codice sorgente è totalmente consultabile e spesso si può collaborare direttamente al suo sviluppo su piattaforme quali GitHub. Molti di questi pacchetti sono collegati a libri di testo o articoli scientifici.\nI pacchetti possono essere installati all’interno di R mediante il comando:\n\ninstall.packages(\"pacchetto\")\n\nDurante il corso utilizzeremo alcuni pacchetti di largo utilizzo:\n\ndata.table: permette il caricamento e la manipolazione in modo efficiente di insiemi di dati di grandi dimensioni e presenta una sintassi particolare ma di rapido e intuitivo utilizzo;\nggplot2: è il pacchetto d’elezione per la produzione di grafici;\nreadxl: è uno dei pacchetti utilizzabili per importare dati da fogli di calcolo Excel;\nglue: semplifica il concatenamento di stringhe, lo useremo in modo diretto raramente;\ngt: viene utilizzato per la produzione di tabelle di qualità. Ogni tabella che vedrete nel corso sarà fatta utilizzando questo pacchetto ma raramente lo utilizzeremo in modo diretto.\n\nInstalliamo i pacchetti richiesti racchiudendoli all’interno di un vettore con il comando c() e scrivendo il seguente comando all’interno della console di R, dopo il simbolo &gt;:\n\ninstall.packages(c(\"data.table\", \"readxl\", \"ggplot2\", \"glue\", \"gt\"))\n\nQuando ne avremo bisogno saremo pronti a caricare e usare i nostri pacchetti.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduzione</span>"
    ]
  },
  {
    "objectID": "intro.html#per-approfondire",
    "href": "intro.html#per-approfondire",
    "title": "1  Introduzione",
    "section": "1.3 Per approfondire",
    "text": "1.3 Per approfondire\nNel caso il materiale presentato nel corso non sia sufficiente o sia inadatto per le vostre esigenze, in rete è possibile reperire numerosissimi testi gratuiti. Tra questi si segnalano:\n\nHands-On Rrogramming with R scritto da Garrett Grolemund;\nR for Data Science scritto da Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund;\nAdvanced R scritto da Hadley Wickham.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduzione</span>"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Le basi",
    "section": "",
    "text": "In questa prima parte inizieremo a prendere dimestichezza con le basi di R:\n\nnel primo capitolo partiremo dall’interazione con la console fino a scrivere ed eseguire il nostro primo script;\nnel secondo capitolo ci concentreremo sull’uso delle diverse tipologie di oggetti di R;\nnel terzo capitolo importeremo dati da file esterni;\nnel quarto capitolo inizieremo a fare i primi esperimenti di trasformazione dei dati con la libreria data.table.",
    "crumbs": [
      "Le basi"
    ]
  },
  {
    "objectID": "basics.html#una-bella-calcolatrice",
    "href": "basics.html#una-bella-calcolatrice",
    "title": "2  Le basi",
    "section": "",
    "text": "[1] 5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Le basi</span>"
    ]
  },
  {
    "objectID": "basics.html#funzioni",
    "href": "basics.html#funzioni",
    "title": "2  Le basi",
    "section": "2.2 Funzioni",
    "text": "2.2 Funzioni\nLe funzioni sono una parte fondamentale di R e consentono di eseguire una serie di operazioni dati degli input, per ottenere nessuno, uno o più output: si tratta di una definizione generica perché sono elementi estremamente generici e incontreremo funzioni pressoché ovunque. Durante il corso non adotteremo la distinzione tra funzioni e metodi, dove le prime danno output e le seconde no: per noi qualunque contenitore di operazioni che vengano applicate a un input sarà una funzione.\nR permette già di utilizzare diverse funzioni. Possiamo assegnare alcuni numeri a una variabile e applicare a essi la funzione somma:\n\nb &lt;- c(2, 3, 5)\nsum(b)\n#&gt; [1] 10\n\nGli input delle funzioni vengono specificati all’interno delle parentesi tonde, ci sono funzioni che richiedono pochi input e altre che ne richiedono di più, nella prossima sezione vedremo come acquisire informazioni sull’utilizzo di una funzione.\nOltre alle funzioni già disponibili, possiamo scrivere delle funzioni personalizzate. Scrivere funzioni efficienti, robuste e ben documentate richiede pratica, però la sintassi di base è:\n\n# la funzione fammi_il_caffe prende come argomenti due stringa di caratteri\n# la prima definisce il tipo e può essere caffè o orzo\n# la seconda definisce la modalità e può essere corto, lungo e macchiato\n# l'output è una stringa di testo\nfammi_il_caffe &lt;- function(tipo = \"caffè\",\n                           modo = \"corto\"){\n  # controllo che l'input abbia le caratteristiche desiderate\n  stopifnot(is.character(tipo))\n  stopifnot(is.character(modo))\n  stopifnot(tipo %in% c(\"caffè\", \"orzo\"))\n  stopifnot(modo %in% c(\"corto\", \"lungo\", \"macchiato\"))\n  \n  # determino il prezzo scegliendo un numero casuale tra 1 e 2 con intervallo 0.1\n  prezzo &lt;- sample(seq(from = 1, to = 2, by = 0.1), 1)\n  # formatto il caffé e il prezzo\n  prodotto_txt &lt;- paste(\"Ecco a lei il suo\", tipo, modo, sep = \" \")\n  prezzo_txt &lt;- paste(\"Sono\", prezzo, \"€.\", sep = \" \")\n  \n  # il risultato è l'ultimo comando della funzione\n  paste(prodotto_txt, prezzo_txt, sep = \". \")\n}\n\n# utilizzo la funzione\nfammi_il_caffe()\n#&gt; [1] \"Ecco a lei il suo caffè corto. Sono 1.6 €.\"\nfammi_il_caffe(\"orzo\", \"lungo\")\n#&gt; [1] \"Ecco a lei il suo orzo lungo. Sono 1.4 €.\"\nfammi_il_caffe(\"orzo\", \"corretto\")\n#&gt; Error in fammi_il_caffe(\"orzo\", \"corretto\"): modo %in% c(\"corto\", \"lungo\", \"macchiato\") non è TRUE\n\nGli argomenti o input della funzione sono racchiusi tra parentesi tonde, con il loro eventuale valore predefinito dichiarato dopo l’uguale. Il corpo della funzione è racchiuso tra parentesi graffe e tipicamente contiene una parte di validazione degli argomenti, il cui scopo è assicurarsi che la funzione non venga utilizzata al di fuori del suo ambito di utilizzo, una parte in cui vengono sviluppati i conti e una parte finale contenente il risultato.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Le basi</span>"
    ]
  },
  {
    "objectID": "basics.html#chiedere-aiuto",
    "href": "basics.html#chiedere-aiuto",
    "title": "2  Le basi",
    "section": "2.4 Chiedere aiuto",
    "text": "2.4 Chiedere aiuto\nQuesta è la sezione più importante dell’intero corso in quanto permette di capire come muoversi sulle proprie gambe, cadendo senza farsi troppo male e tentando di rialzarsi.\nR offre un ottimo aiuto in linea: ogni pacchetto, dataset e funzione è documentata, contiene quindi tutte le informazioni necessarie a definirne gli ambiti e modi di utilizzo. Per accedere a queste informazioni è sufficiente anteporre un ? all’elemento del quale si desidera sapere di più:\n\n?sum()\n?iris\n\nSe l’elemento di cui si vuole sapere di più è presente in un pacchetto noto ma non attualmente caricato, sarà necessario specificare il pacchetto a cui appartiene l’elemento:\n\n?ggplot2::geom_point()\n\nSe l’elemento di cui si vuole sapere di più è presente in un pacchetto ignoto, installato ma non attualmente caricato, si può lanciare una ricerca tra i pacchetti installati nel sistema anteponendo ?? all’elemento stesso e poi selezionando la voce di interesse:\n\n??geom_point()\n\nAll’interno della sezione help è presente una descrizione iniziale dell’elemento e, se si tratta di una funzione, dei diversi input richiesti, seguono poi sezioni in cui viene spesso spiegato il funzionamento delle funzione, per finire con utili esempi d’uso.\nA volte, potrebbe non essere sufficiente ricorrere all’aiuto in linea, in tal caso si consiglia di rivolgersi a Google o qualche large language model (LLM) come DeepSeek, ChatGPT o Perplexity. Quest’ultimi strumenti di intelligenza artificiale permettono, a fronte di richieste dettagliate e ben strutturate di farsi scrivere e spiegare interi programmi, anche complessi, richiedendo poche rifiniture manuali.\nAlternativi e complementari all’uso di strumenti di intelligenza artificiale, sono presenti forum dedicati alla programmazione e con una folta comunità di preparatissimi (e spesso burberi) utilizzatori di R. Tra questi forum StackOverflow risulta particolarmente ricco di spunti e risorse. Per utilizzarlo al meglio:\n\ncercate con cura se la vostra domanda sia già stata posta in passato;\nprendete spunto da domande simili per strutturare con cura la vostra richiesta;\ncreate un esempio minimo riproducibile (reprex).\n\nL’ultimo punto ha lo scopo di rendere il vostro codice riproducibile e facilmente leggibile da chi vi dovrà aiutare: inserite nel codice tutte le librerie e variabili usate e togliete tutto quanto non è indispensabile per riprodurre il problema su cui state chiedendo aiuto.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Le basi</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Corso di R: dalle basi alla prima analisi dei dati",
    "section": "",
    "text": "Prefazione\nQuesto documento raccoglie il materiale presentato durante l’omonimo corso tenuto in ARPAL nel 2025.\nIl corso e l’annesso documento nascono dalla volontà degli autori di condividere con i colleghi la potenza e la bellezza dell’utilizzare un linguaggio di programmazione nell’analisi dei dati.\nIl linguaggio di programmazione scelto è R, in quanto permette sin da subito di eseguire semplici analisi di dati, richiedendo di imparare una sintassi intuitiva e qualche funzione, in gran parte già pronta o disponibile in una qualche libreria specializzata. Inoltre, con R risulta facile creare grafici efficaci e densi di contenuto.\nQuesto documento è rilasciato gratuitamente con licenza CC BY-NC-SA 4.0.",
    "crumbs": [
      "Prefazione"
    ]
  },
  {
    "objectID": "basics.html#il-primo-script",
    "href": "basics.html#il-primo-script",
    "title": "2  Le basi",
    "section": "2.3 Il primo script",
    "text": "2.3 Il primo script\nNella sezione precedente abbiamo visto codice che spazia su più righe: inserirlo riga per riga nella console inizia ad essere scomodo e si rischia di dimenticare cosa si è fatto poche righe prima.\nPossiamo creare un file.R in cui elencare in ordine di esecuzione i comandi che vogliamo eseguire. Per farlo è sufficiente cliccare l’icona  in alto a sinistra in RStudio, selezionare Rscript e quindi salvare il file. All’interno di tale file possiamo scrivere le seguenti istruzioni:\n\n# richiamo un dataset di R\niris\n#&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n#&gt; 1            5.1         3.5          1.4         0.2     setosa\n#&gt; 2            4.9         3.0          1.4         0.2     setosa\n#&gt; 3            4.7         3.2          1.3         0.2     setosa\n#&gt; 4            4.6         3.1          1.5         0.2     setosa\n#&gt; 5            5.0         3.6          1.4         0.2     setosa\n#&gt; 6            5.4         3.9          1.7         0.4     setosa\n#&gt; 7            4.6         3.4          1.4         0.3     setosa\n#&gt; 8            5.0         3.4          1.5         0.2     setosa\n#&gt; 9            4.4         2.9          1.4         0.2     setosa\n#&gt; 10           4.9         3.1          1.5         0.1     setosa\n#&gt; 11           5.4         3.7          1.5         0.2     setosa\n#&gt; 12           4.8         3.4          1.6         0.2     setosa\n#&gt; 13           4.8         3.0          1.4         0.1     setosa\n#&gt; 14           4.3         3.0          1.1         0.1     setosa\n#&gt; 15           5.8         4.0          1.2         0.2     setosa\n#&gt; 16           5.7         4.4          1.5         0.4     setosa\n#&gt; 17           5.4         3.9          1.3         0.4     setosa\n#&gt; 18           5.1         3.5          1.4         0.3     setosa\n#&gt; 19           5.7         3.8          1.7         0.3     setosa\n#&gt; 20           5.1         3.8          1.5         0.3     setosa\n#&gt; 21           5.4         3.4          1.7         0.2     setosa\n#&gt; 22           5.1         3.7          1.5         0.4     setosa\n#&gt; 23           4.6         3.6          1.0         0.2     setosa\n#&gt; 24           5.1         3.3          1.7         0.5     setosa\n#&gt; 25           4.8         3.4          1.9         0.2     setosa\n#&gt; 26           5.0         3.0          1.6         0.2     setosa\n#&gt; 27           5.0         3.4          1.6         0.4     setosa\n#&gt; 28           5.2         3.5          1.5         0.2     setosa\n#&gt; 29           5.2         3.4          1.4         0.2     setosa\n#&gt; 30           4.7         3.2          1.6         0.2     setosa\n#&gt; 31           4.8         3.1          1.6         0.2     setosa\n#&gt; 32           5.4         3.4          1.5         0.4     setosa\n#&gt; 33           5.2         4.1          1.5         0.1     setosa\n#&gt; 34           5.5         4.2          1.4         0.2     setosa\n#&gt; 35           4.9         3.1          1.5         0.2     setosa\n#&gt; 36           5.0         3.2          1.2         0.2     setosa\n#&gt; 37           5.5         3.5          1.3         0.2     setosa\n#&gt; 38           4.9         3.6          1.4         0.1     setosa\n#&gt; 39           4.4         3.0          1.3         0.2     setosa\n#&gt; 40           5.1         3.4          1.5         0.2     setosa\n#&gt; 41           5.0         3.5          1.3         0.3     setosa\n#&gt; 42           4.5         2.3          1.3         0.3     setosa\n#&gt; 43           4.4         3.2          1.3         0.2     setosa\n#&gt; 44           5.0         3.5          1.6         0.6     setosa\n#&gt; 45           5.1         3.8          1.9         0.4     setosa\n#&gt; 46           4.8         3.0          1.4         0.3     setosa\n#&gt; 47           5.1         3.8          1.6         0.2     setosa\n#&gt; 48           4.6         3.2          1.4         0.2     setosa\n#&gt; 49           5.3         3.7          1.5         0.2     setosa\n#&gt; 50           5.0         3.3          1.4         0.2     setosa\n#&gt; 51           7.0         3.2          4.7         1.4 versicolor\n#&gt; 52           6.4         3.2          4.5         1.5 versicolor\n#&gt; 53           6.9         3.1          4.9         1.5 versicolor\n#&gt; 54           5.5         2.3          4.0         1.3 versicolor\n#&gt; 55           6.5         2.8          4.6         1.5 versicolor\n#&gt; 56           5.7         2.8          4.5         1.3 versicolor\n#&gt; 57           6.3         3.3          4.7         1.6 versicolor\n#&gt; 58           4.9         2.4          3.3         1.0 versicolor\n#&gt; 59           6.6         2.9          4.6         1.3 versicolor\n#&gt; 60           5.2         2.7          3.9         1.4 versicolor\n#&gt; 61           5.0         2.0          3.5         1.0 versicolor\n#&gt; 62           5.9         3.0          4.2         1.5 versicolor\n#&gt; 63           6.0         2.2          4.0         1.0 versicolor\n#&gt; 64           6.1         2.9          4.7         1.4 versicolor\n#&gt; 65           5.6         2.9          3.6         1.3 versicolor\n#&gt; 66           6.7         3.1          4.4         1.4 versicolor\n#&gt; 67           5.6         3.0          4.5         1.5 versicolor\n#&gt; 68           5.8         2.7          4.1         1.0 versicolor\n#&gt; 69           6.2         2.2          4.5         1.5 versicolor\n#&gt; 70           5.6         2.5          3.9         1.1 versicolor\n#&gt; 71           5.9         3.2          4.8         1.8 versicolor\n#&gt; 72           6.1         2.8          4.0         1.3 versicolor\n#&gt; 73           6.3         2.5          4.9         1.5 versicolor\n#&gt; 74           6.1         2.8          4.7         1.2 versicolor\n#&gt; 75           6.4         2.9          4.3         1.3 versicolor\n#&gt; 76           6.6         3.0          4.4         1.4 versicolor\n#&gt; 77           6.8         2.8          4.8         1.4 versicolor\n#&gt; 78           6.7         3.0          5.0         1.7 versicolor\n#&gt; 79           6.0         2.9          4.5         1.5 versicolor\n#&gt; 80           5.7         2.6          3.5         1.0 versicolor\n#&gt; 81           5.5         2.4          3.8         1.1 versicolor\n#&gt; 82           5.5         2.4          3.7         1.0 versicolor\n#&gt; 83           5.8         2.7          3.9         1.2 versicolor\n#&gt; 84           6.0         2.7          5.1         1.6 versicolor\n#&gt; 85           5.4         3.0          4.5         1.5 versicolor\n#&gt; 86           6.0         3.4          4.5         1.6 versicolor\n#&gt; 87           6.7         3.1          4.7         1.5 versicolor\n#&gt; 88           6.3         2.3          4.4         1.3 versicolor\n#&gt; 89           5.6         3.0          4.1         1.3 versicolor\n#&gt; 90           5.5         2.5          4.0         1.3 versicolor\n#&gt; 91           5.5         2.6          4.4         1.2 versicolor\n#&gt; 92           6.1         3.0          4.6         1.4 versicolor\n#&gt; 93           5.8         2.6          4.0         1.2 versicolor\n#&gt; 94           5.0         2.3          3.3         1.0 versicolor\n#&gt; 95           5.6         2.7          4.2         1.3 versicolor\n#&gt; 96           5.7         3.0          4.2         1.2 versicolor\n#&gt; 97           5.7         2.9          4.2         1.3 versicolor\n#&gt; 98           6.2         2.9          4.3         1.3 versicolor\n#&gt; 99           5.1         2.5          3.0         1.1 versicolor\n#&gt; 100          5.7         2.8          4.1         1.3 versicolor\n#&gt; 101          6.3         3.3          6.0         2.5  virginica\n#&gt; 102          5.8         2.7          5.1         1.9  virginica\n#&gt; 103          7.1         3.0          5.9         2.1  virginica\n#&gt; 104          6.3         2.9          5.6         1.8  virginica\n#&gt; 105          6.5         3.0          5.8         2.2  virginica\n#&gt; 106          7.6         3.0          6.6         2.1  virginica\n#&gt; 107          4.9         2.5          4.5         1.7  virginica\n#&gt; 108          7.3         2.9          6.3         1.8  virginica\n#&gt; 109          6.7         2.5          5.8         1.8  virginica\n#&gt; 110          7.2         3.6          6.1         2.5  virginica\n#&gt; 111          6.5         3.2          5.1         2.0  virginica\n#&gt; 112          6.4         2.7          5.3         1.9  virginica\n#&gt; 113          6.8         3.0          5.5         2.1  virginica\n#&gt; 114          5.7         2.5          5.0         2.0  virginica\n#&gt; 115          5.8         2.8          5.1         2.4  virginica\n#&gt; 116          6.4         3.2          5.3         2.3  virginica\n#&gt; 117          6.5         3.0          5.5         1.8  virginica\n#&gt; 118          7.7         3.8          6.7         2.2  virginica\n#&gt; 119          7.7         2.6          6.9         2.3  virginica\n#&gt; 120          6.0         2.2          5.0         1.5  virginica\n#&gt; 121          6.9         3.2          5.7         2.3  virginica\n#&gt; 122          5.6         2.8          4.9         2.0  virginica\n#&gt; 123          7.7         2.8          6.7         2.0  virginica\n#&gt; 124          6.3         2.7          4.9         1.8  virginica\n#&gt; 125          6.7         3.3          5.7         2.1  virginica\n#&gt; 126          7.2         3.2          6.0         1.8  virginica\n#&gt; 127          6.2         2.8          4.8         1.8  virginica\n#&gt; 128          6.1         3.0          4.9         1.8  virginica\n#&gt; 129          6.4         2.8          5.6         2.1  virginica\n#&gt; 130          7.2         3.0          5.8         1.6  virginica\n#&gt; 131          7.4         2.8          6.1         1.9  virginica\n#&gt; 132          7.9         3.8          6.4         2.0  virginica\n#&gt; 133          6.4         2.8          5.6         2.2  virginica\n#&gt; 134          6.3         2.8          5.1         1.5  virginica\n#&gt; 135          6.1         2.6          5.6         1.4  virginica\n#&gt; 136          7.7         3.0          6.1         2.3  virginica\n#&gt; 137          6.3         3.4          5.6         2.4  virginica\n#&gt; 138          6.4         3.1          5.5         1.8  virginica\n#&gt; 139          6.0         3.0          4.8         1.8  virginica\n#&gt; 140          6.9         3.1          5.4         2.1  virginica\n#&gt; 141          6.7         3.1          5.6         2.4  virginica\n#&gt; 142          6.9         3.1          5.1         2.3  virginica\n#&gt; 143          5.8         2.7          5.1         1.9  virginica\n#&gt; 144          6.8         3.2          5.9         2.3  virginica\n#&gt; 145          6.7         3.3          5.7         2.5  virginica\n#&gt; 146          6.7         3.0          5.2         2.3  virginica\n#&gt; 147          6.3         2.5          5.0         1.9  virginica\n#&gt; 148          6.5         3.0          5.2         2.0  virginica\n#&gt; 149          6.2         3.4          5.4         2.3  virginica\n#&gt; 150          5.9         3.0          5.1         1.8  virginica\n\n# ho visto che il dataset è composto da misurazioni di lunghezze e larghezze di\n# petali e sepali di tre diverse specie di iris. Le specie considerate sono\n# setosa, versicolor e virginica: per ogni specie sono presenti 50 record.\n\n# faccio un grafico tra coppie di variabili\nplot(iris, col = iris$Species)\n\n# noto che le misurazioni relative a una specie sono ben distinte dalle altre due,\n# quest'ultime mostrano un certo grado di sovrapposizione. Vediamo se il calcolo\n# dei quartili eseguita sulle singole variabili per i diversi gruppi mi aiuta a\n# identificare i gruppi che mostrano sovrapposizione parziale nelle misure.\n\n# definisco una funzione per il calcolo dei quartili a partire da generici\n# percentili\nquartili &lt;- function(valori){\n  stopifnot(is.vector(valori))\n  \n  # uso la funzione predefinita quantile\n  quantile(valori, probs = c(0.25, 0.50, 0.75))\n}\n\n# la funzione aggregate divide una serie di dati in gruppi, applica la funzione\n# desiderata a ogni gruppo e poi ricombina i risultati\naggregate(. ~ Species, data = iris, FUN = quartili)\n#&gt;      Species Sepal.Length.25% Sepal.Length.50% Sepal.Length.75% Sepal.Width.25%\n#&gt; 1     setosa            4.800            5.000            5.200           3.200\n#&gt; 2 versicolor            5.600            5.900            6.300           2.525\n#&gt; 3  virginica            6.225            6.500            6.900           2.800\n#&gt;   Sepal.Width.50% Sepal.Width.75% Petal.Length.25% Petal.Length.50%\n#&gt; 1           3.400           3.675            1.400            1.500\n#&gt; 2           2.800           3.000            4.000            4.350\n#&gt; 3           3.000           3.175            5.100            5.550\n#&gt;   Petal.Length.75% Petal.Width.25% Petal.Width.50% Petal.Width.75%\n#&gt; 1            1.575             0.2             0.2             0.3\n#&gt; 2            4.600             1.2             1.3             1.5\n#&gt; 3            5.875             1.8             2.0             2.3\n\n# la specie setosa risulta ben disinguibile dalle specie versicolor e virginica,\n# quest'ultime mostrano dimensioni simili.\n# Le variabili che permettono di distinguere meglio le tre specie sono \n# la lunghezza e la larghezza dei petali.\n\n\n\n\n\n\n\n\nCon gli script è possibile tenere traccia di cosa è stato fatto, commentando il codice per renderlo maggiormente comprensibile a se stessi e ai colleghi: d’ora in poi gli script saranno il nostro principale strumento di lavoro. Vedremo poi nei prossimi capitoli un modo per includere gli script in un documento finito, migliorando ulteriormente la riproducibilità di un’analisi.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Le basi</span>"
    ]
  },
  {
    "objectID": "basics.html#esercizio",
    "href": "basics.html#esercizio",
    "title": "2  Le basi",
    "section": "2.5 Esercizio",
    "text": "2.5 Esercizio\n\nDocumentarsi sull’utilizzo della funzione aggregate;\ncalcolare la media di tutte le quattro tipologie di misure delle tre specie nel dataset iris.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Le basi</span>"
    ]
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "2  Il primo assaggio",
    "section": "",
    "text": "2.1 Una bella calcolatrice\nIniziamo a prendere confidenza con la console di R, utilizzandola come una calcolatrice e scriviamo\n2 + 3\n#&gt; [1] 5\nR, in tutta la sua potenza, dovrebbe produrre\nsignifica che il risultato è un vettore formato da un elemento e tale elemento è pari a 5.\nPossiamo anche fare calcoli multipli: definiamo un vettore di 100 elementi che riporti tutti gli interi da 1 a 100 e a ognuno dei suoi elementi aggiungiamo 2.\n1:100 + 2\n#&gt;   [1]   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20\n#&gt;  [19]  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38\n#&gt;  [37]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56\n#&gt;  [55]  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74\n#&gt;  [73]  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92\n#&gt;  [91]  93  94  95  96  97  98  99 100 101 102\nSe volessimo ripetere il calcolo ma aggiungendo 3 invece di due, possiamo cliccare sulla console, schiacciare il tasto 🔼, visualizzando l’ultimo comando eseguito, cambiare il 2 in 3 e dare invio. Tuttavia è meglio assegnare il vettore contenente i 100 elementi a una variabile che chiameremo a, così da richiamarla in seguito e fare altri calcoli.\na &lt;- 1:100\na questo punto\na + 3\n#&gt;   [1]   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21\n#&gt;  [19]  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39\n#&gt;  [37]  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n#&gt;  [55]  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75\n#&gt;  [73]  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93\n#&gt;  [91]  94  95  96  97  98  99 100 101 102 103\nPosso usare la variabile definita poco sopra per fare altri calcoli. Per esempio, posso elevare alla seconda tutti gli elementi associati alla variabile a:\na^2\n#&gt;   [1]     1     4     9    16    25    36    49    64    81   100   121   144\n#&gt;  [13]   169   196   225   256   289   324   361   400   441   484   529   576\n#&gt;  [25]   625   676   729   784   841   900   961  1024  1089  1156  1225  1296\n#&gt;  [37]  1369  1444  1521  1600  1681  1764  1849  1936  2025  2116  2209  2304\n#&gt;  [49]  2401  2500  2601  2704  2809  2916  3025  3136  3249  3364  3481  3600\n#&gt;  [61]  3721  3844  3969  4096  4225  4356  4489  4624  4761  4900  5041  5184\n#&gt;  [73]  5329  5476  5625  5776  5929  6084  6241  6400  6561  6724  6889  7056\n#&gt;  [85]  7225  7396  7569  7744  7921  8100  8281  8464  8649  8836  9025  9216\n#&gt;  [97]  9409  9604  9801 10000\nIl valore di una variabile può essere sovrascritto con una nuova assegnazione, come nel caso riportato di seguito:\na &lt;- \"Bella zio: sto usando R!\"\nNella creazione di variabili è bene fare caso ad alcune regole:\nDurante il corso utilizzeremo nomi di variabili e funzioni scritte in caratteri minuscoli e senza lettere accentate, utilizzando gli underscore al posto degli spazi (notazione snake_case).",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "start.html#una-bella-calcolatrice",
    "href": "start.html#una-bella-calcolatrice",
    "title": "2  Il primo assaggio",
    "section": "",
    "text": "[1] 5\n\n\n\n\n\n\n\n\n\n\n\n\n\nR è case sensitive e quindi f ed F saranno due diverse variabili;\nnon sono ammesse variabili che iniziano con numeri (come 1variabile);\nnon sono ammessi caratteri diversi da lettere, numeri e underscore, compresi gli spazi;\nsono ammessi caratteri accentati ma complicano molto la vita.",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "start.html#funzioni",
    "href": "start.html#funzioni",
    "title": "2  Il primo assaggio",
    "section": "2.2 Funzioni",
    "text": "2.2 Funzioni\nLe funzioni sono una parte fondamentale di R e consentono di eseguire una serie di operazioni dati degli input, per ottenere nessuno, uno o più output: si tratta di una definizione generica perché sono elementi estremamente generici e incontreremo funzioni pressoché ovunque. Durante il corso non adotteremo la distinzione tra funzioni e metodi, dove le prime danno output e le seconde no: per noi qualunque contenitore di operazioni che vengano applicate a un input sarà una funzione.\nR permette già di utilizzare diverse funzioni. Possiamo assegnare alcuni numeri a una variabile e applicare a essi la funzione somma:\n\nb &lt;- c(2, 3, 5)\nsum(b)\n#&gt; [1] 10\n\nGli input delle funzioni vengono specificati all’interno delle parentesi tonde, ci sono funzioni che richiedono pochi input e altre che ne richiedono di più, nella prossima sezione vedremo come acquisire informazioni sull’utilizzo di una funzione.\nOltre alle funzioni già disponibili, possiamo scrivere delle funzioni personalizzate. Scrivere funzioni efficienti, robuste e ben documentate richiede pratica, però la sintassi di base è:\n\n# la funzione fammi_il_caffe prende come argomenti due stringa di caratteri\n# la prima definisce il tipo e può essere caffè o orzo\n# la seconda definisce la modalità e può essere corto, lungo e macchiato\n# l'output è una stringa di testo\nfammi_il_caffe &lt;- function(tipo = \"caffè\",\n                           modo = \"corto\"){\n  # controllo che l'input abbia le caratteristiche desiderate\n  stopifnot(is.character(tipo))\n  stopifnot(is.character(modo))\n  stopifnot(tipo %in% c(\"caffè\", \"orzo\"))\n  stopifnot(modo %in% c(\"corto\", \"lungo\", \"macchiato\"))\n  \n  # determino il prezzo scegliendo un numero casuale tra 1 e 2 con intervallo 0.1\n  prezzo &lt;- sample(seq(from = 1, to = 2, by = 0.1), 1)\n  # formatto il caffé e il prezzo\n  prodotto_txt &lt;- paste(\"Ecco a lei il suo\", tipo, modo, sep = \" \")\n  prezzo_txt &lt;- paste(\"Sono\", prezzo, \"€.\", sep = \" \")\n  \n  # il risultato è l'ultimo comando della funzione\n  paste(prodotto_txt, prezzo_txt, sep = \". \")\n}\n\n# utilizzo la funzione\nfammi_il_caffe()\n#&gt; [1] \"Ecco a lei il suo caffè corto. Sono 1.6 €.\"\nfammi_il_caffe(\"orzo\", \"lungo\")\n#&gt; [1] \"Ecco a lei il suo orzo lungo. Sono 1.4 €.\"\nfammi_il_caffe(\"orzo\", \"corretto\")\n#&gt; Error in fammi_il_caffe(\"orzo\", \"corretto\"): modo %in% c(\"corto\", \"lungo\", \"macchiato\") non è TRUE\n\nGli argomenti o input della funzione sono racchiusi tra parentesi tonde, con il loro eventuale valore predefinito dichiarato dopo l’uguale. Il corpo della funzione è racchiuso tra parentesi graffe e tipicamente contiene una parte di validazione degli argomenti, il cui scopo è assicurarsi che la funzione non venga utilizzata al di fuori del suo ambito di utilizzo, una parte in cui vengono sviluppati i conti e una parte finale contenente il risultato.",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "start.html#il-primo-script",
    "href": "start.html#il-primo-script",
    "title": "2  Il primo assaggio",
    "section": "2.3 Il primo script",
    "text": "2.3 Il primo script\nNella sezione precedente abbiamo visto codice che spazia su più righe: inserirlo riga per riga nella console inizia ad essere scomodo e si rischia di dimenticare cosa si è fatto poche righe prima.\nPossiamo creare un file.R in cui elencare in ordine di esecuzione i comandi che vogliamo eseguire. Per farlo è sufficiente cliccare l’icona  in alto a sinistra in RStudio, selezionare Rscript e quindi salvare il file. All’interno di tale file possiamo scrivere le seguenti istruzioni:\n\n#&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n#&gt; 1            5.1         3.5          1.4         0.2     setosa\n#&gt; 2            4.9         3.0          1.4         0.2     setosa\n#&gt; 3            4.7         3.2          1.3         0.2     setosa\n#&gt; 4            4.6         3.1          1.5         0.2     setosa\n#&gt; 5            5.0         3.6          1.4         0.2     setosa\n#&gt; 6            5.4         3.9          1.7         0.4     setosa\n#&gt; 7            4.6         3.4          1.4         0.3     setosa\n#&gt; 8            5.0         3.4          1.5         0.2     setosa\n#&gt; 9            4.4         2.9          1.4         0.2     setosa\n#&gt; 10           4.9         3.1          1.5         0.1     setosa\n#&gt; 11           5.4         3.7          1.5         0.2     setosa\n#&gt; 12           4.8         3.4          1.6         0.2     setosa\n#&gt; 13           4.8         3.0          1.4         0.1     setosa\n#&gt; 14           4.3         3.0          1.1         0.1     setosa\n#&gt; 15           5.8         4.0          1.2         0.2     setosa\n#&gt; 16           5.7         4.4          1.5         0.4     setosa\n#&gt; 17           5.4         3.9          1.3         0.4     setosa\n#&gt; 18           5.1         3.5          1.4         0.3     setosa\n#&gt; 19           5.7         3.8          1.7         0.3     setosa\n#&gt; 20           5.1         3.8          1.5         0.3     setosa\n#&gt; 21           5.4         3.4          1.7         0.2     setosa\n#&gt; 22           5.1         3.7          1.5         0.4     setosa\n#&gt; 23           4.6         3.6          1.0         0.2     setosa\n#&gt; 24           5.1         3.3          1.7         0.5     setosa\n#&gt; 25           4.8         3.4          1.9         0.2     setosa\n#&gt; 26           5.0         3.0          1.6         0.2     setosa\n#&gt; 27           5.0         3.4          1.6         0.4     setosa\n#&gt; 28           5.2         3.5          1.5         0.2     setosa\n#&gt; 29           5.2         3.4          1.4         0.2     setosa\n#&gt; 30           4.7         3.2          1.6         0.2     setosa\n#&gt; 31           4.8         3.1          1.6         0.2     setosa\n#&gt; 32           5.4         3.4          1.5         0.4     setosa\n#&gt; 33           5.2         4.1          1.5         0.1     setosa\n#&gt; 34           5.5         4.2          1.4         0.2     setosa\n#&gt; 35           4.9         3.1          1.5         0.2     setosa\n#&gt; 36           5.0         3.2          1.2         0.2     setosa\n#&gt; 37           5.5         3.5          1.3         0.2     setosa\n#&gt; 38           4.9         3.6          1.4         0.1     setosa\n#&gt; 39           4.4         3.0          1.3         0.2     setosa\n#&gt; 40           5.1         3.4          1.5         0.2     setosa\n#&gt; 41           5.0         3.5          1.3         0.3     setosa\n#&gt; 42           4.5         2.3          1.3         0.3     setosa\n#&gt; 43           4.4         3.2          1.3         0.2     setosa\n#&gt; 44           5.0         3.5          1.6         0.6     setosa\n#&gt; 45           5.1         3.8          1.9         0.4     setosa\n#&gt; 46           4.8         3.0          1.4         0.3     setosa\n#&gt; 47           5.1         3.8          1.6         0.2     setosa\n#&gt; 48           4.6         3.2          1.4         0.2     setosa\n#&gt; 49           5.3         3.7          1.5         0.2     setosa\n#&gt; 50           5.0         3.3          1.4         0.2     setosa\n#&gt; 51           7.0         3.2          4.7         1.4 versicolor\n#&gt; 52           6.4         3.2          4.5         1.5 versicolor\n#&gt; 53           6.9         3.1          4.9         1.5 versicolor\n#&gt; 54           5.5         2.3          4.0         1.3 versicolor\n#&gt; 55           6.5         2.8          4.6         1.5 versicolor\n#&gt; 56           5.7         2.8          4.5         1.3 versicolor\n#&gt; 57           6.3         3.3          4.7         1.6 versicolor\n#&gt; 58           4.9         2.4          3.3         1.0 versicolor\n#&gt; 59           6.6         2.9          4.6         1.3 versicolor\n#&gt; 60           5.2         2.7          3.9         1.4 versicolor\n#&gt; 61           5.0         2.0          3.5         1.0 versicolor\n#&gt; 62           5.9         3.0          4.2         1.5 versicolor\n#&gt; 63           6.0         2.2          4.0         1.0 versicolor\n#&gt; 64           6.1         2.9          4.7         1.4 versicolor\n#&gt; 65           5.6         2.9          3.6         1.3 versicolor\n#&gt; 66           6.7         3.1          4.4         1.4 versicolor\n#&gt; 67           5.6         3.0          4.5         1.5 versicolor\n#&gt; 68           5.8         2.7          4.1         1.0 versicolor\n#&gt; 69           6.2         2.2          4.5         1.5 versicolor\n#&gt; 70           5.6         2.5          3.9         1.1 versicolor\n#&gt; 71           5.9         3.2          4.8         1.8 versicolor\n#&gt; 72           6.1         2.8          4.0         1.3 versicolor\n#&gt; 73           6.3         2.5          4.9         1.5 versicolor\n#&gt; 74           6.1         2.8          4.7         1.2 versicolor\n#&gt; 75           6.4         2.9          4.3         1.3 versicolor\n#&gt; 76           6.6         3.0          4.4         1.4 versicolor\n#&gt; 77           6.8         2.8          4.8         1.4 versicolor\n#&gt; 78           6.7         3.0          5.0         1.7 versicolor\n#&gt; 79           6.0         2.9          4.5         1.5 versicolor\n#&gt; 80           5.7         2.6          3.5         1.0 versicolor\n#&gt; 81           5.5         2.4          3.8         1.1 versicolor\n#&gt; 82           5.5         2.4          3.7         1.0 versicolor\n#&gt; 83           5.8         2.7          3.9         1.2 versicolor\n#&gt; 84           6.0         2.7          5.1         1.6 versicolor\n#&gt; 85           5.4         3.0          4.5         1.5 versicolor\n#&gt; 86           6.0         3.4          4.5         1.6 versicolor\n#&gt; 87           6.7         3.1          4.7         1.5 versicolor\n#&gt; 88           6.3         2.3          4.4         1.3 versicolor\n#&gt; 89           5.6         3.0          4.1         1.3 versicolor\n#&gt; 90           5.5         2.5          4.0         1.3 versicolor\n#&gt; 91           5.5         2.6          4.4         1.2 versicolor\n#&gt; 92           6.1         3.0          4.6         1.4 versicolor\n#&gt; 93           5.8         2.6          4.0         1.2 versicolor\n#&gt; 94           5.0         2.3          3.3         1.0 versicolor\n#&gt; 95           5.6         2.7          4.2         1.3 versicolor\n#&gt; 96           5.7         3.0          4.2         1.2 versicolor\n#&gt; 97           5.7         2.9          4.2         1.3 versicolor\n#&gt; 98           6.2         2.9          4.3         1.3 versicolor\n#&gt; 99           5.1         2.5          3.0         1.1 versicolor\n#&gt; 100          5.7         2.8          4.1         1.3 versicolor\n#&gt; 101          6.3         3.3          6.0         2.5  virginica\n#&gt; 102          5.8         2.7          5.1         1.9  virginica\n#&gt; 103          7.1         3.0          5.9         2.1  virginica\n#&gt; 104          6.3         2.9          5.6         1.8  virginica\n#&gt; 105          6.5         3.0          5.8         2.2  virginica\n#&gt; 106          7.6         3.0          6.6         2.1  virginica\n#&gt; 107          4.9         2.5          4.5         1.7  virginica\n#&gt; 108          7.3         2.9          6.3         1.8  virginica\n#&gt; 109          6.7         2.5          5.8         1.8  virginica\n#&gt; 110          7.2         3.6          6.1         2.5  virginica\n#&gt; 111          6.5         3.2          5.1         2.0  virginica\n#&gt; 112          6.4         2.7          5.3         1.9  virginica\n#&gt; 113          6.8         3.0          5.5         2.1  virginica\n#&gt; 114          5.7         2.5          5.0         2.0  virginica\n#&gt; 115          5.8         2.8          5.1         2.4  virginica\n#&gt; 116          6.4         3.2          5.3         2.3  virginica\n#&gt; 117          6.5         3.0          5.5         1.8  virginica\n#&gt; 118          7.7         3.8          6.7         2.2  virginica\n#&gt; 119          7.7         2.6          6.9         2.3  virginica\n#&gt; 120          6.0         2.2          5.0         1.5  virginica\n#&gt; 121          6.9         3.2          5.7         2.3  virginica\n#&gt; 122          5.6         2.8          4.9         2.0  virginica\n#&gt; 123          7.7         2.8          6.7         2.0  virginica\n#&gt; 124          6.3         2.7          4.9         1.8  virginica\n#&gt; 125          6.7         3.3          5.7         2.1  virginica\n#&gt; 126          7.2         3.2          6.0         1.8  virginica\n#&gt; 127          6.2         2.8          4.8         1.8  virginica\n#&gt; 128          6.1         3.0          4.9         1.8  virginica\n#&gt; 129          6.4         2.8          5.6         2.1  virginica\n#&gt; 130          7.2         3.0          5.8         1.6  virginica\n#&gt; 131          7.4         2.8          6.1         1.9  virginica\n#&gt; 132          7.9         3.8          6.4         2.0  virginica\n#&gt; 133          6.4         2.8          5.6         2.2  virginica\n#&gt; 134          6.3         2.8          5.1         1.5  virginica\n#&gt; 135          6.1         2.6          5.6         1.4  virginica\n#&gt; 136          7.7         3.0          6.1         2.3  virginica\n#&gt; 137          6.3         3.4          5.6         2.4  virginica\n#&gt; 138          6.4         3.1          5.5         1.8  virginica\n#&gt; 139          6.0         3.0          4.8         1.8  virginica\n#&gt; 140          6.9         3.1          5.4         2.1  virginica\n#&gt; 141          6.7         3.1          5.6         2.4  virginica\n#&gt; 142          6.9         3.1          5.1         2.3  virginica\n#&gt; 143          5.8         2.7          5.1         1.9  virginica\n#&gt; 144          6.8         3.2          5.9         2.3  virginica\n#&gt; 145          6.7         3.3          5.7         2.5  virginica\n#&gt; 146          6.7         3.0          5.2         2.3  virginica\n#&gt; 147          6.3         2.5          5.0         1.9  virginica\n#&gt; 148          6.5         3.0          5.2         2.0  virginica\n#&gt; 149          6.2         3.4          5.4         2.3  virginica\n#&gt; 150          5.9         3.0          5.1         1.8  virginica\n#&gt;      Species Sepal.Length.25% Sepal.Length.50% Sepal.Length.75% Sepal.Width.25%\n#&gt; 1     setosa            4.800            5.000            5.200           3.200\n#&gt; 2 versicolor            5.600            5.900            6.300           2.525\n#&gt; 3  virginica            6.225            6.500            6.900           2.800\n#&gt;   Sepal.Width.50% Sepal.Width.75% Petal.Length.25% Petal.Length.50%\n#&gt; 1           3.400           3.675            1.400            1.500\n#&gt; 2           2.800           3.000            4.000            4.350\n#&gt; 3           3.000           3.175            5.100            5.550\n#&gt;   Petal.Length.75% Petal.Width.25% Petal.Width.50% Petal.Width.75%\n#&gt; 1            1.575             0.2             0.2             0.3\n#&gt; 2            4.600             1.2             1.3             1.5\n#&gt; 3            5.875             1.8             2.0             2.3\n\n\n\n\n\n\n\n\nCon gli script è possibile tenere traccia di cosa è stato fatto, commentando il codice per renderlo maggiormente comprensibile a se stessi e ai colleghi: d’ora in poi gli script saranno il nostro principale strumento di lavoro. Vedremo poi nei prossimi capitoli un modo per includere gli script in un documento finito, migliorando ulteriormente la riproducibilità di un’analisi.",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "start.html#chiedere-aiuto",
    "href": "start.html#chiedere-aiuto",
    "title": "2  Il primo assaggio",
    "section": "2.4 Chiedere aiuto",
    "text": "2.4 Chiedere aiuto\nQuesta è la sezione più importante dell’intero corso in quanto permette di capire come muoversi sulle proprie gambe, cadendo senza farsi troppo male e tentando di rialzarsi.\nR offre un ottimo aiuto in linea: ogni pacchetto, dataset e funzione è documentata, contiene quindi tutte le informazioni necessarie a definirne gli ambiti e modi di utilizzo. Per accedere a queste informazioni è sufficiente anteporre un ? all’elemento del quale si desidera sapere di più:\n\n?sum()\n?iris\n\nSe l’elemento di cui si vuole sapere di più è presente in un pacchetto noto ma non attualmente caricato, sarà necessario specificare il pacchetto a cui appartiene l’elemento:\n\n?ggplot2::geom_point()\n\nSe l’elemento di cui si vuole sapere di più è presente in un pacchetto ignoto, installato ma non attualmente caricato, si può lanciare una ricerca tra i pacchetti installati nel sistema anteponendo ?? all’elemento stesso e poi selezionando la voce di interesse:\n\n??geom_point()\n\nAll’interno della sezione help è presente una descrizione iniziale dell’elemento e, se si tratta di una funzione, dei diversi input richiesti, seguono poi sezioni in cui viene spesso spiegato il funzionamento delle funzione, per finire con utili esempi d’uso.\nA volte, potrebbe non essere sufficiente ricorrere all’aiuto in linea, in tal caso si consiglia di rivolgersi a Google o qualche large language model (LLM) come DeepSeek, ChatGPT o Perplexity. Quest’ultimi strumenti di intelligenza artificiale permettono, a fronte di richieste dettagliate e ben strutturate di farsi scrivere e spiegare interi programmi, anche complessi, richiedendo poche rifiniture manuali.\nAlternativi e complementari all’uso di strumenti di intelligenza artificiale, sono presenti forum dedicati alla programmazione e con una folta comunità di preparatissimi (e spesso burberi) utilizzatori di R. Tra questi forum StackOverflow risulta particolarmente ricco di spunti e risorse. Per utilizzarlo al meglio:\n\ncercate con cura se la vostra domanda sia già stata posta in passato;\nprendete spunto da domande simili per strutturare con cura la vostra richiesta;\ncreate un esempio minimo riproducibile (reprex).\n\nL’ultimo punto ha lo scopo di rendere il vostro codice riproducibile e facilmente leggibile da chi vi dovrà aiutare: inserite nel codice tutte le librerie e variabili usate e togliete tutto quanto non è indispensabile per riprodurre il problema su cui state chiedendo aiuto.\n\nEsercizioSoluzione\n\n\n\nDocumentarsi sull’utilizzo della funzione aggregate;\ncalcolare la media di tutte le quattro tipologie di misure delle tre specie nel dataset iris.\n\n\n\n\n?aggregate()    # 1.\naggregate(. ~ Species, data = iris, FUN = mean)    # 2.\n#&gt;      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n#&gt; 1     setosa        5.006       3.428        1.462       0.246\n#&gt; 2 versicolor        5.936       2.770        4.260       1.326\n#&gt; 3  virginica        6.588       2.974        5.552       2.026",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "start.html#esercizio",
    "href": "start.html#esercizio",
    "title": "2  Il primo assaggio",
    "section": "2.5 Esercizio",
    "text": "2.5 Esercizio\n\nDocumentarsi sull’utilizzo della funzione aggregate;\ncalcolare la media di tutte le quattro tipologie di misure delle tre specie nel dataset iris.\n\n\n\n\n\n\n\n\n?aggregate()    # 1.\naggregate(. ~ Species, data = iris, FUN = mean)    # 2.\n#&gt;      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n#&gt; 1     setosa        5.006       3.428        1.462       0.246\n#&gt; 2 versicolor        5.936       2.770        4.260       1.326\n#&gt; 3  virginica        6.588       2.974        5.552       2.026",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Il primo assaggio</span>"
    ]
  },
  {
    "objectID": "objects.html",
    "href": "objects.html",
    "title": "3  Oggetti di R",
    "section": "",
    "text": "3.1 Tipologie di elementi\nPrima di vedere le classi di oggetti di R, che possiamo pensare come diverse tipologie di contenitori, è bene dare una rapida occhiata alla tipologia di elementi che possiamo mettere in tali contenitori.\nQuando saremo in dubbio sulla tipologia di un dato elemento possiamo usare la funzione typeof().",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#sec-typeof",
    "href": "objects.html#sec-typeof",
    "title": "3  Oggetti di R",
    "section": "",
    "text": "3.1.1 Numeri\nR ha la possibilità di gestire diverse tipologie di numeri, tuttavia noi useremo principalmente la tipologia double che abbrevia il nome double-precision floating-point format: che definisce come in informatica vengono archiviati e manipolati gli elementi esprimibili con una parte decimale. Ogni misura - con l’esclusione dei conteggi puri - anche una che dovesse avere valore 5, ricade in questa tipologia. Utilizzare questa tipologia di elementi è semplice:\n\na &lt;- c(2, 2.1, 2.5)\n\nPiù raramente dovremo definire degli interi. Essi afferiscono alla tipologia integer e si scrivono facendo seguire una L maiuscola al numero:\n\nb &lt;- c(1L, 5L)\n\nAltre tipologie di numeri più esotiche comprendono i tipi complex e raw, rispettivamente per numeri complessi e bytes: non li useremo.\nNumeri particolari che possiamo ottenere a seguito di operazioni matematiche sono NaN: not a number, Inf e -Inf: il primo è ottenibile, ad esempio, dividendo zero per zero mentre gli ultimi rispettivamente dividendo un numero positivo o negativo per zero. Si può testare se un numero sia NaN o Inf rispettivamente con le funzioni is.nan() e is.infinite().\n\n\n3.1.2 Testo\nR mette a disposizione una singola tipologia per le stringhe di testo: indipendentemente dalla loro lunghezza saranno tutte character e si scrivono racchiudendo i diversi elementi tra singole o doppie virgolette alte (nel corso utilizzeremo sempre le doppie virgolette):\n\nc &lt;- \"roba\"\n\nTalvolta i numeri possono anche essere archiviati come testo, ad esempio , tuttavia si tratta perlopiù di un risultato indesiderato ma abbastanza frequente quando vengono importati dati non ben ripuliti: per farli tornare numeri possiamo usare la funzione as.numeric().\n\n\n3.1.3 Logici\nGli elementi logici sono quelli che possono assumere esclusivamente valore TRUE o FALSE: difficilmente vengono assegnati a mano in una variabile ma compaiono spesso a seguito di un’operazione logica:\n\nd &lt;- 3 &lt; 5\nd\n#&gt; [1] TRUE\ntypeof(d)\n#&gt; [1] \"logical\"\n\ne &lt;- 3 == 3L\n\nInternamente, R li tratta come interi pari 1 o 0 e a cui assegna rispettivamente le etichette TRUE e FALSE.\n\n\n3.1.4 Elementi mancanti ed elementi nulli\nR identifica gli elementi mancanti con NA: not available. NA rappresenta una tipologia particolare in quanto diventa di tipo testo, numero o logico a seconda di dove si trova. Tipicamente, operazioni eseguite su gruppi di elementi dove uno o più di essi sono NA, danno risultato NA. Si può verificare se un elemento è di tipo NA con la funzione is.na().\nTalvolta, R può restituire un elemento di tipo NULL estraendo un elemento che non esiste da un qualche oggetto. Più comunemente, è possibile assegnare il valore NULL a un oggetto per eliminarne il contenuto:\n\nc()\n#&gt; NULL\n\na\n#&gt; [1] 2.0 2.1 2.5\na &lt;- NULL\na\n#&gt; NULL",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#vettori",
    "href": "objects.html#vettori",
    "title": "3  Oggetti di R",
    "section": "3.2 Vettori",
    "text": "3.2 Vettori\nUn vettore è un insieme di valori non ordinati, tutti appartenenti alla stessa tipologia. Tutte le variabili create nella sezione Sezione 3.1 sono esempi di vettori: anche se alcuni contengono solo numeri, testo o valori logici, essi non contengono mai elementi ascrivibili a più di una tipologia e possiedono una sola dimensione. Tecnicamente, i vettori non sono catalogati da R all’interno di una classe, tuttavia è comodo vederli come la più semplice delle classi, intendendo con questo termine - per semplicità - una tipologia di contenitore di elementi.\nPosso accedere ai diversi elementi di un vettore attraverso la notazione vettore[indici] dove indici è a sua volta un vettore di elementi da includere o escludere:\n\nf &lt;- c(\"a\", \"b\", \"c\", NA, \"e\")\nf[1] # seleziono solo il primo elemento\n#&gt; [1] \"a\"\nf[-1] # seleziono tutti gli elementi tranne il primo\n#&gt; [1] \"b\" \"c\" NA  \"e\"\nf[2:4] # seleziono gli elementi dal secondo al quarto, estremi compresi\n#&gt; [1] \"b\" \"c\" NA\nf[-(2:4)] # seleziono tutti gli elementi tranne quelli dal secondo al quarto\n#&gt; [1] \"a\" \"e\"\nf[c(2,4)] # seleziono il secondo e quarto elemento\n#&gt; [1] \"b\" NA\nf[-c(2,4)] # seleziono tutti gli elementi tranne il secondo e il quarto\n#&gt; [1] \"a\" \"c\" \"e\"\ng &lt;- c(3,5)\nf[g] # seleziono il terzo e quinto elemento\n#&gt; [1] \"c\" \"e\"\nf[-g] # seleziono tutti gli elementi tranne il terzo e il quinto\n#&gt; [1] \"a\" \"b\" NA\nf[is.na(f)] # seleziono solo gli elementi NA\n#&gt; [1] NA\nf[!is.na(f)] # seleziono solo gli elementi non NA\n#&gt; [1] \"a\" \"b\" \"c\" \"e\"\n\nPer verificare se ho a che fare con un vettore posso usare la funzione is.vector(), mentre per determinare quanti elementi contenga uso la funzione length().\nCon i vettori possiamo iniziare a fare qualche conto con funzioni quali max(), min(), sum(), mean(), median(), quantile(), which.min() e which.max() e molte altre.\nDi sovente può essere utile generare vettori casuali e a tale scopo le funzioni forse più usate sono sample() e rnorm()`: la prima può estrarre un numero casuale di elementi da un vettore, la seconda può estrarre un numero arbitrario di valori da una distribuzione normale con parametri noti. Facciamo qualche prova:\n\nsorprendimi &lt;- sample(1:1000, 30, replace = TRUE) # estraggo 30 valori tra loro indipendenti dagli interi da 1 a 1000.\nmax(sorprendimi) # trovo il valore massimo\n#&gt; [1] 998\nwhich.max(sorprendimi) # trovo la posizione in cui si trova il valore massimo\n#&gt; [1] 11\nm &lt;- which.max(sorprendimi)\nsorprendimi[m]\n#&gt; [1] 998\nmax(sorprendimi) == sorprendimi[m] # funziona!\n#&gt; [1] TRUE\n\nrnorm(1000, mean = 10, sd = 3) |&gt; # uso la pipe per concatenare le funzioni\n  hist()\n\n\n\n\n\n\n\n\nGli elementi di un vettore possono essere associati a un nome agendo sull’attributo names() di tale vettore.\n\ng\n#&gt; [1] 3 5\nnames(g) &lt;- c(\"tre\", \"cinque\")\ng\n#&gt;    tre cinque \n#&gt;      3      5\nnames(g) &lt;- NULL\ng\n#&gt; [1] 3 5",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#matrici-ed-array",
    "href": "objects.html#matrici-ed-array",
    "title": "3  Oggetti di R",
    "section": "3.3 Matrici ed array",
    "text": "3.3 Matrici ed array\nLa naturale estensione dei vettori sono le matrici e gli array multidimensionali. Si creano essenzialmente partendo da vettori e organizzandoli su righe e colonne.\nL’estrazione di elementi dalla matrice avviene con la notazione matrice[righe, colonne], come mostrato nell’esempio riportato di seguito:\n\nmatrice &lt;- matrix(1:100, nrow = 20)\nmatrice[5:7, 3:5]\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   45   65   85\n#&gt; [2,]   46   66   86\n#&gt; [3,]   47   67   87\nmatrice[, 3]\n#&gt;  [1] 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\nPossiamo determinare e modificare la dimensione di una matrice con il comando dim():\n\ndim(matrice)\n#&gt; [1] 20  5\ndim(matrice) &lt;- c(5, 20)\n\nSu vettori e matrici di tipo numerico è possibile eseguire tutte le operazioni dell’algebra lineare, come il prodotto righe per colonne, utilizzando l’operatore %*%, o il calcolo dell’inversa con il comando inv() del pacchetto MASS: difficilmente ci troveremo a dover eseguire tali operazioni manualmente, in quanto numerosissimi algoritmi sono già implementati in modo molto efficiente in funzioni e pacchetti dedicati.",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#fattori",
    "href": "objects.html#fattori",
    "title": "3  Oggetti di R",
    "section": "3.4 Fattori",
    "text": "3.4 Fattori\nUn testo che può assumere solo valori finiti e noti è un fattore: il colore dei capelli dei bambini di una classe è un fattore, così come le tipologie di acque analizzate dal laboratorio, per esempio acque di mare, acque potabili, acque sotterranee e molte altre ma non infinite altre. I valori distinti che può assumere un fattore vengono chiamati livelli.\nGli esempi di fattori proposti poco sopra non sono ordinati, ma alcuni possono esserlo, come i giudizi di un esame: insufficiente, sufficiente, buono, distinto e ottimo.\nInternamente R tratta i fattori come interi a cui assegna un’etichetta di testo. Per i fattori ordinati gli interi sono dati seguendo l’ordine specificato al momento dell’identificazione dei livelli, per i fattori non ordinati gli interi sono assegnati in ordine alfabetico o di apparizione.\n\nterza_c &lt;- c(\"ottimo\", \"ottimo\", \"buono\", \"insufficiente\", \"buono\", \"buono\")\n\n# non specifico i livelli\nfactor(terza_c)\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: buono insufficiente ottimo\n\n# i livelli non sono ordinati\nfactor(terza_c,\n       levels = c(\"insufficiente\", \"sufficiente\", \"buono\", \"distinto\", \"ottimo\"))\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: insufficiente sufficiente buono distinto ottimo\n\n# i livelli sono ordinati\nfactor(terza_c,\n       ordered = TRUE,\n       levels = c(\"insufficiente\", \"sufficiente\", \"buono\", \"distinto\", \"ottimo\"))\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: insufficiente &lt; sufficiente &lt; buono &lt; distinto &lt; ottimo",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#liste",
    "href": "objects.html#liste",
    "title": "3  Oggetti di R",
    "section": "3.5 Liste",
    "text": "3.5 Liste\nI contenitori visti fin’ora sono ottimi per raggruppare una singola tipologia di elementi. Le liste permettono di raggruppare tipologie di elementi diversi tra loro mantenendoli comunque ordinati:\n\nlista &lt;- list(numeri = 1:20,\n              testo = c(\"pippo\", \"ciccio\", \"riccio\"),\n              giudizi = terza_c,\n              matrice = matrice)\nstr(lista)\n#&gt; List of 4\n#&gt;  $ numeri : int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\n#&gt;  $ testo  : chr [1:3] \"pippo\" \"ciccio\" \"riccio\"\n#&gt;  $ giudizi: chr [1:6] \"ottimo\" \"ottimo\" \"buono\" \"insufficiente\" ...\n#&gt;  $ matrice: int [1:5, 1:20] 1 2 3 4 5 6 7 8 9 10 ...\n\nPosso accedere alla struttura di una lista con il comando str(). Tale comando lo rivedremo anche in seguito e in generale è utile con tutti i tipi di contenitori di R. I singoli gruppi vengono estratti con la sintassi lista[[gruppo]] o lista$gruppo e all’interno del gruppo posso accedere i diversi elementi come visto nelle sezioni precedenti:\n\nlista[[2]]\n#&gt; [1] \"pippo\"  \"ciccio\" \"riccio\"\nlista$testo\n#&gt; [1] \"pippo\"  \"ciccio\" \"riccio\"\nlista$testo[2]\n#&gt; [1] \"ciccio\"\nlista[[4]][2,]\n#&gt;  [1]  2  7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 92 97\nlista[[4]][2,3]\n#&gt; [1] 12\nlista[[3]] &lt;- NULL",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#data-frames",
    "href": "objects.html#data-frames",
    "title": "3  Oggetti di R",
    "section": "3.6 Data frames",
    "text": "3.6 Data frames\nI data frame sono tabelle di dati che possono accogliere nelle loro colonne diverse tipologie di elementi. Rispetto alle liste, si guadagna una maggiore facilità di consultazione ma si perde la possibilità di immagazzinare gruppi di diversa lunghezza: sono comunque la tipologia di dati che incontreremo più frequentemente.\nInternamente R tratta le singole colonne di un data frame come gruppi di una lista.\n\niris\n#&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n#&gt; 1            5.1         3.5          1.4         0.2     setosa\n#&gt; 2            4.9         3.0          1.4         0.2     setosa\n#&gt; 3            4.7         3.2          1.3         0.2     setosa\n#&gt; 4            4.6         3.1          1.5         0.2     setosa\n#&gt; 5            5.0         3.6          1.4         0.2     setosa\n#&gt; 6            5.4         3.9          1.7         0.4     setosa\n#&gt; 7            4.6         3.4          1.4         0.3     setosa\n#&gt; 8            5.0         3.4          1.5         0.2     setosa\n#&gt; 9            4.4         2.9          1.4         0.2     setosa\n#&gt; 10           4.9         3.1          1.5         0.1     setosa\n#&gt; 11           5.4         3.7          1.5         0.2     setosa\n#&gt; 12           4.8         3.4          1.6         0.2     setosa\n#&gt; 13           4.8         3.0          1.4         0.1     setosa\n#&gt; 14           4.3         3.0          1.1         0.1     setosa\n#&gt; 15           5.8         4.0          1.2         0.2     setosa\n#&gt; 16           5.7         4.4          1.5         0.4     setosa\n#&gt; 17           5.4         3.9          1.3         0.4     setosa\n#&gt; 18           5.1         3.5          1.4         0.3     setosa\n#&gt; 19           5.7         3.8          1.7         0.3     setosa\n#&gt; 20           5.1         3.8          1.5         0.3     setosa\n#&gt; 21           5.4         3.4          1.7         0.2     setosa\n#&gt; 22           5.1         3.7          1.5         0.4     setosa\n#&gt; 23           4.6         3.6          1.0         0.2     setosa\n#&gt; 24           5.1         3.3          1.7         0.5     setosa\n#&gt; 25           4.8         3.4          1.9         0.2     setosa\n#&gt; 26           5.0         3.0          1.6         0.2     setosa\n#&gt; 27           5.0         3.4          1.6         0.4     setosa\n#&gt; 28           5.2         3.5          1.5         0.2     setosa\n#&gt; 29           5.2         3.4          1.4         0.2     setosa\n#&gt; 30           4.7         3.2          1.6         0.2     setosa\n#&gt; 31           4.8         3.1          1.6         0.2     setosa\n#&gt; 32           5.4         3.4          1.5         0.4     setosa\n#&gt; 33           5.2         4.1          1.5         0.1     setosa\n#&gt; 34           5.5         4.2          1.4         0.2     setosa\n#&gt; 35           4.9         3.1          1.5         0.2     setosa\n#&gt; 36           5.0         3.2          1.2         0.2     setosa\n#&gt; 37           5.5         3.5          1.3         0.2     setosa\n#&gt; 38           4.9         3.6          1.4         0.1     setosa\n#&gt; 39           4.4         3.0          1.3         0.2     setosa\n#&gt; 40           5.1         3.4          1.5         0.2     setosa\n#&gt; 41           5.0         3.5          1.3         0.3     setosa\n#&gt; 42           4.5         2.3          1.3         0.3     setosa\n#&gt; 43           4.4         3.2          1.3         0.2     setosa\n#&gt; 44           5.0         3.5          1.6         0.6     setosa\n#&gt; 45           5.1         3.8          1.9         0.4     setosa\n#&gt; 46           4.8         3.0          1.4         0.3     setosa\n#&gt; 47           5.1         3.8          1.6         0.2     setosa\n#&gt; 48           4.6         3.2          1.4         0.2     setosa\n#&gt; 49           5.3         3.7          1.5         0.2     setosa\n#&gt; 50           5.0         3.3          1.4         0.2     setosa\n#&gt; 51           7.0         3.2          4.7         1.4 versicolor\n#&gt; 52           6.4         3.2          4.5         1.5 versicolor\n#&gt; 53           6.9         3.1          4.9         1.5 versicolor\n#&gt; 54           5.5         2.3          4.0         1.3 versicolor\n#&gt; 55           6.5         2.8          4.6         1.5 versicolor\n#&gt; 56           5.7         2.8          4.5         1.3 versicolor\n#&gt; 57           6.3         3.3          4.7         1.6 versicolor\n#&gt; 58           4.9         2.4          3.3         1.0 versicolor\n#&gt; 59           6.6         2.9          4.6         1.3 versicolor\n#&gt; 60           5.2         2.7          3.9         1.4 versicolor\n#&gt; 61           5.0         2.0          3.5         1.0 versicolor\n#&gt; 62           5.9         3.0          4.2         1.5 versicolor\n#&gt; 63           6.0         2.2          4.0         1.0 versicolor\n#&gt; 64           6.1         2.9          4.7         1.4 versicolor\n#&gt; 65           5.6         2.9          3.6         1.3 versicolor\n#&gt; 66           6.7         3.1          4.4         1.4 versicolor\n#&gt; 67           5.6         3.0          4.5         1.5 versicolor\n#&gt; 68           5.8         2.7          4.1         1.0 versicolor\n#&gt; 69           6.2         2.2          4.5         1.5 versicolor\n#&gt; 70           5.6         2.5          3.9         1.1 versicolor\n#&gt; 71           5.9         3.2          4.8         1.8 versicolor\n#&gt; 72           6.1         2.8          4.0         1.3 versicolor\n#&gt; 73           6.3         2.5          4.9         1.5 versicolor\n#&gt; 74           6.1         2.8          4.7         1.2 versicolor\n#&gt; 75           6.4         2.9          4.3         1.3 versicolor\n#&gt; 76           6.6         3.0          4.4         1.4 versicolor\n#&gt; 77           6.8         2.8          4.8         1.4 versicolor\n#&gt; 78           6.7         3.0          5.0         1.7 versicolor\n#&gt; 79           6.0         2.9          4.5         1.5 versicolor\n#&gt; 80           5.7         2.6          3.5         1.0 versicolor\n#&gt; 81           5.5         2.4          3.8         1.1 versicolor\n#&gt; 82           5.5         2.4          3.7         1.0 versicolor\n#&gt; 83           5.8         2.7          3.9         1.2 versicolor\n#&gt; 84           6.0         2.7          5.1         1.6 versicolor\n#&gt; 85           5.4         3.0          4.5         1.5 versicolor\n#&gt; 86           6.0         3.4          4.5         1.6 versicolor\n#&gt; 87           6.7         3.1          4.7         1.5 versicolor\n#&gt; 88           6.3         2.3          4.4         1.3 versicolor\n#&gt; 89           5.6         3.0          4.1         1.3 versicolor\n#&gt; 90           5.5         2.5          4.0         1.3 versicolor\n#&gt; 91           5.5         2.6          4.4         1.2 versicolor\n#&gt; 92           6.1         3.0          4.6         1.4 versicolor\n#&gt; 93           5.8         2.6          4.0         1.2 versicolor\n#&gt; 94           5.0         2.3          3.3         1.0 versicolor\n#&gt; 95           5.6         2.7          4.2         1.3 versicolor\n#&gt; 96           5.7         3.0          4.2         1.2 versicolor\n#&gt; 97           5.7         2.9          4.2         1.3 versicolor\n#&gt; 98           6.2         2.9          4.3         1.3 versicolor\n#&gt; 99           5.1         2.5          3.0         1.1 versicolor\n#&gt; 100          5.7         2.8          4.1         1.3 versicolor\n#&gt; 101          6.3         3.3          6.0         2.5  virginica\n#&gt; 102          5.8         2.7          5.1         1.9  virginica\n#&gt; 103          7.1         3.0          5.9         2.1  virginica\n#&gt; 104          6.3         2.9          5.6         1.8  virginica\n#&gt; 105          6.5         3.0          5.8         2.2  virginica\n#&gt; 106          7.6         3.0          6.6         2.1  virginica\n#&gt; 107          4.9         2.5          4.5         1.7  virginica\n#&gt; 108          7.3         2.9          6.3         1.8  virginica\n#&gt; 109          6.7         2.5          5.8         1.8  virginica\n#&gt; 110          7.2         3.6          6.1         2.5  virginica\n#&gt; 111          6.5         3.2          5.1         2.0  virginica\n#&gt; 112          6.4         2.7          5.3         1.9  virginica\n#&gt; 113          6.8         3.0          5.5         2.1  virginica\n#&gt; 114          5.7         2.5          5.0         2.0  virginica\n#&gt; 115          5.8         2.8          5.1         2.4  virginica\n#&gt; 116          6.4         3.2          5.3         2.3  virginica\n#&gt; 117          6.5         3.0          5.5         1.8  virginica\n#&gt; 118          7.7         3.8          6.7         2.2  virginica\n#&gt; 119          7.7         2.6          6.9         2.3  virginica\n#&gt; 120          6.0         2.2          5.0         1.5  virginica\n#&gt; 121          6.9         3.2          5.7         2.3  virginica\n#&gt; 122          5.6         2.8          4.9         2.0  virginica\n#&gt; 123          7.7         2.8          6.7         2.0  virginica\n#&gt; 124          6.3         2.7          4.9         1.8  virginica\n#&gt; 125          6.7         3.3          5.7         2.1  virginica\n#&gt; 126          7.2         3.2          6.0         1.8  virginica\n#&gt; 127          6.2         2.8          4.8         1.8  virginica\n#&gt; 128          6.1         3.0          4.9         1.8  virginica\n#&gt; 129          6.4         2.8          5.6         2.1  virginica\n#&gt; 130          7.2         3.0          5.8         1.6  virginica\n#&gt; 131          7.4         2.8          6.1         1.9  virginica\n#&gt; 132          7.9         3.8          6.4         2.0  virginica\n#&gt; 133          6.4         2.8          5.6         2.2  virginica\n#&gt; 134          6.3         2.8          5.1         1.5  virginica\n#&gt; 135          6.1         2.6          5.6         1.4  virginica\n#&gt; 136          7.7         3.0          6.1         2.3  virginica\n#&gt; 137          6.3         3.4          5.6         2.4  virginica\n#&gt; 138          6.4         3.1          5.5         1.8  virginica\n#&gt; 139          6.0         3.0          4.8         1.8  virginica\n#&gt; 140          6.9         3.1          5.4         2.1  virginica\n#&gt; 141          6.7         3.1          5.6         2.4  virginica\n#&gt; 142          6.9         3.1          5.1         2.3  virginica\n#&gt; 143          5.8         2.7          5.1         1.9  virginica\n#&gt; 144          6.8         3.2          5.9         2.3  virginica\n#&gt; 145          6.7         3.3          5.7         2.5  virginica\n#&gt; 146          6.7         3.0          5.2         2.3  virginica\n#&gt; 147          6.3         2.5          5.0         1.9  virginica\n#&gt; 148          6.5         3.0          5.2         2.0  virginica\n#&gt; 149          6.2         3.4          5.4         2.3  virginica\n#&gt; 150          5.9         3.0          5.1         1.8  virginica\n# ci ricorda qualcosa?\nstr(iris)\n#&gt; 'data.frame':    150 obs. of  5 variables:\n#&gt;  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n#&gt;  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n#&gt;  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n#&gt;  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n#&gt;  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\ndf &lt;- data.frame(lettere = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"),\n                 interi = 1:6,\n                 numeri = rnorm(6))\ndf$numeri\n#&gt; [1] -0.1829260 -1.3792578  1.2506006 -1.8762368 -0.3687876 -2.1292973\ndf$lettere[3]\n#&gt; [1] \"c\"\ndf$lettere[3] &lt;- \"g\"\ndf$sopra3 &lt;- df$interi &gt; 3\ndf$interi &lt;- NULL\n\nPosso estrarre o modificare i nomi delle colonne con la funzione colnames():\n\ncolnames(df)\n#&gt; [1] \"lettere\" \"numeri\"  \"sopra3\"\ncolnames(df)[3] &lt;- \"random\"\n\nI data frame hanno anche la possibilità di specificare nomi per ogni riga: meglio starne alla larga.\nLa sintassi base di R rende spesso complicato filtrare o eseguire operazioni complesse sui data frame. Nel tempo sono quindi nati diversi pacchetti per gestire in modo efficiente queste operazioni. Tra questi si segnalano:\n\ndplyr permette di manipolare i dati tramite la concatenazione di una serie di funzioni i cui nomi in inglese richiamano le operazioni che si intendono eseguire (ad esempio filter(), mutate(), group_by e molte altre);\ndata.table nato per la manipolazione efficiente di grandi quantità di dati, propone una sintassi che estende quella proposta nella versione base di R: lo vedremo nel prossimo capitolo.\n\n\nEsercizioSoluzione\n\n\nPiero ha preparato 10 prove indipendenti di un campione di acqua per la misura dei nitrati, ottenendo i seguenti risultati: 0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98 mg/l, una delle prove non è andata a buon fine e non ha ottenuto alcun risultato.\n\nsalvare i risultati in un contenitore di R appropriato;\ncalcolare la media, la deviazione standard e l’intervallo di confidenza della media (\\(\\alpha\\) = 0.95) delle misure supponendo una distribuzione dei valori di tipo normale.\n\nPina ha preparato altre 10 prove indipendenti dello stesso campione di acqua per la misura dei nitrati, ottenendo i seguenti risultati: 1.09, 0.89, 0.74, 1.07, 0.68, 0.89, 1.25, 1.10, 0.86, 0.88 mg/l.\n\nsalvare i risultati ottenuti dai due operatori nello stesso oggetto di R;\ncalcolare l’intervallo di confidenza delle misure ottenute dai due operatori;\nvalutare la presenza di una differenza tra i risultati ottenuti dai due operatori.\n\n\n\n\n# 1\npiero &lt;- c(0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98, NA)\nmean(piero, na.rm = TRUE)\n#&gt; [1] 0.8655556\nsd(piero, na.rm = TRUE)\n#&gt; [1] 0.119385\nn &lt;- piero[!is.na(piero)] |&gt; length() # immaginate un altro modo\n\nci &lt;- function(data, alfa = 0.975){\n  stopifnot(is.numeric(data))\n  stopifnot(is.numeric(alfa))\n  stopifnot(alfa &gt; 0 &  alfa &lt;= 1)\n  \n  n &lt;- sum(!is.na(data))\n  mean(data, na.rm = TRUE) + c(-1, 1) * qt(alfa, n - 1) * sd(data, na.rm = TRUE) / sqrt(n)\n}\n\nci(piero)\n#&gt; [1] 0.7737881 0.9573230\n\n# 2\nrisultati &lt;- data.frame(piero = piero,\n                        pina = c(1.09, 0.89, 0.74, 1.07, 0.68, 0.89, 1.25, 1.10, 0.86, 0.88))\nlapply(risultati, ci)\n#&gt; $piero\n#&gt; [1] 0.7737881 0.9573230\n#&gt; \n#&gt; $pina\n#&gt; [1] 0.8180479 1.0719521\nt.test(risultati$piero, risultati$pina)\n#&gt; \n#&gt;  Welch Two Sample t-test\n#&gt; \n#&gt; data:  risultati$piero and risultati$pina\n#&gt; t = -1.1548, df = 15.825, p-value = 0.2653\n#&gt; alternative hypothesis: true difference in means is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  -0.22541955  0.06653066\n#&gt; sample estimates:\n#&gt; mean of x mean of y \n#&gt; 0.8655556 0.9450000",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  },
  {
    "objectID": "objects.html#sec-classes",
    "href": "objects.html#sec-classes",
    "title": "3  Oggetti di R",
    "section": "3.2 Tipologie di contenitori",
    "text": "3.2 Tipologie di contenitori\n\n3.2.1 Vettori\nUn vettore è un insieme di valori non ordinati, tutti appartenenti alla stessa tipologia. Tutte le variabili create nella Sezione 3.1 sono esempi di vettori: anche se alcuni contengono solo numeri, testo o valori logici, essi non contengono mai elementi ascrivibili a più di una tipologia e possiedono una sola dimensione. Tecnicamente, i vettori non sono catalogati da R all’interno di una classe, tuttavia è comodo vederli come la più semplice delle classi, intendendo con questo termine - per semplicità - una tipologia di contenitore di elementi.\nPosso accedere ai diversi elementi di un vettore attraverso la notazione vettore[indici] dove indici è a sua volta un vettore di elementi da includere o escludere:\n\nf &lt;- c(\"a\", \"b\", \"c\", NA, \"e\")\nf[1] # seleziono solo il primo elemento\n#&gt; [1] \"a\"\nf[-1] # seleziono tutti gli elementi tranne il primo\n#&gt; [1] \"b\" \"c\" NA  \"e\"\nf[2:4] # seleziono gli elementi dal secondo al quarto, estremi compresi\n#&gt; [1] \"b\" \"c\" NA\nf[-(2:4)] # seleziono tutti gli elementi tranne quelli dal secondo al quarto\n#&gt; [1] \"a\" \"e\"\nf[c(2,4)] # seleziono il secondo e quarto elemento\n#&gt; [1] \"b\" NA\nf[-c(2,4)] # seleziono tutti gli elementi tranne il secondo e il quarto\n#&gt; [1] \"a\" \"c\" \"e\"\ng &lt;- c(3,5)\nf[g] # seleziono il terzo e quinto elemento\n#&gt; [1] \"c\" \"e\"\nf[-g] # seleziono tutti gli elementi tranne il terzo e il quinto\n#&gt; [1] \"a\" \"b\" NA\nf[is.na(f)] # seleziono solo gli elementi NA\n#&gt; [1] NA\nf[!is.na(f)] # seleziono solo gli elementi non NA\n#&gt; [1] \"a\" \"b\" \"c\" \"e\"\n\nPer verificare se ho a che fare con un vettore posso usare la funzione is.vector(), mentre per determinare quanti elementi contenga uso la funzione length().\nCon i vettori possiamo iniziare a fare qualche conto con funzioni quali max(), min(), sum(), mean(), median(), quantile(), which.min() e which.max() e molte altre.\nDi sovente può essere utile generare vettori casuali e a tale scopo le funzioni forse più usate sono sample() e rnorm(): la prima può estrarre un numero casuale di elementi da un vettore, la seconda può estrarre un numero arbitrario di valori da una distribuzione normale con parametri noti. Facciamo qualche prova:\n\nsorprendimi &lt;- sample(1:1000, 30, replace = TRUE) # estraggo 30 valori tra loro indipendenti dagli interi da 1 a 1000.\nmax(sorprendimi) # trovo il valore massimo\n#&gt; [1] 998\nwhich.max(sorprendimi) # trovo la posizione in cui si trova il valore massimo\n#&gt; [1] 11\nm &lt;- which.max(sorprendimi)\nsorprendimi[m]\n#&gt; [1] 998\nmax(sorprendimi) == sorprendimi[m] # funziona!\n#&gt; [1] TRUE\n\nrnorm(1000, mean = 10, sd = 3) |&gt; # uso la pipe per concatenare le funzioni\n  hist()\n\n\n\n\n\n\n\n\nGli elementi di un vettore possono essere associati a un nome agendo sull’attributo names() di tale vettore.\n\ng\n#&gt; [1] 3 5\nnames(g) &lt;- c(\"tre\", \"cinque\")\ng\n#&gt;    tre cinque \n#&gt;      3      5\nnames(g) &lt;- NULL\ng\n#&gt; [1] 3 5\n\n\n\n3.2.2 Matrici ed array\nLa naturale estensione dei vettori sono le matrici e gli array multidimensionali. Si creano essenzialmente partendo da vettori e organizzandoli su righe e colonne.\nL’estrazione di elementi dalla matrice avviene con la notazione matrice[righe, colonne], come mostrato nell’esempio riportato di seguito:\n\nmatrice &lt;- matrix(1:100, nrow = 20)\nmatrice[5:7, 3:5]\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   45   65   85\n#&gt; [2,]   46   66   86\n#&gt; [3,]   47   67   87\nmatrice[, 3]\n#&gt;  [1] 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\nPossiamo determinare e modificare la dimensione di una matrice con il comando dim():\n\ndim(matrice)\n#&gt; [1] 20  5\ndim(matrice) &lt;- c(5, 20)\n\nSu vettori e matrici di tipo numerico è possibile eseguire tutte le operazioni dell’algebra lineare, come il prodotto righe per colonne, utilizzando l’operatore %*%, o il calcolo dell’inversa con il comando inv() del pacchetto MASS: difficilmente ci troveremo a dover eseguire tali operazioni manualmente, in quanto numerosissimi algoritmi sono già implementati in modo molto efficiente in funzioni e pacchetti dedicati.\n\n\n3.2.3 Fattori\nUn testo che può assumere solo valori finiti e noti è un fattore: il colore dei capelli dei bambini di una classe è un fattore, così come le tipologie di acque analizzate dal laboratorio, per esempio acque di mare, acque potabili, acque sotterranee e molte altre ma non infinite altre. I valori distinti che può assumere un fattore vengono chiamati livelli.\nGli esempi di fattori proposti poco sopra non sono ordinati, ma alcuni possono esserlo, come i giudizi di un esame: insufficiente, sufficiente, buono, distinto e ottimo.\nInternamente R tratta i fattori come interi a cui assegna un’etichetta di testo. Per i fattori ordinati gli interi sono dati seguendo l’ordine specificato al momento dell’identificazione dei livelli, per i fattori non ordinati gli interi sono assegnati in ordine alfabetico o di apparizione.\n\nterza_c &lt;- c(\"ottimo\", \"ottimo\", \"buono\", \"insufficiente\", \"buono\", \"buono\")\n\n# non specifico i livelli\nfactor(terza_c)\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: buono insufficiente ottimo\n\n# i livelli non sono ordinati\nfactor(terza_c,\n       levels = c(\"insufficiente\", \"sufficiente\", \"buono\", \"distinto\", \"ottimo\"))\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: insufficiente sufficiente buono distinto ottimo\n\n# i livelli sono ordinati\nfactor(terza_c,\n       ordered = TRUE,\n       levels = c(\"insufficiente\", \"sufficiente\", \"buono\", \"distinto\", \"ottimo\"))\n#&gt; [1] ottimo        ottimo        buono         insufficiente buono        \n#&gt; [6] buono        \n#&gt; Levels: insufficiente &lt; sufficiente &lt; buono &lt; distinto &lt; ottimo\n\n\n\n3.2.4 Liste\nI contenitori visti fin’ora sono ottimi per raggruppare una singola tipologia di elementi. Le liste permettono di raggruppare tipologie di elementi diversi tra loro mantenendoli comunque ordinati:\n\nlista &lt;- list(numeri = 1:20,\n              testo = c(\"pippo\", \"ciccio\", \"riccio\"),\n              giudizi = terza_c,\n              matrice = matrice)\nstr(lista)\n#&gt; List of 4\n#&gt;  $ numeri : int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\n#&gt;  $ testo  : chr [1:3] \"pippo\" \"ciccio\" \"riccio\"\n#&gt;  $ giudizi: chr [1:6] \"ottimo\" \"ottimo\" \"buono\" \"insufficiente\" ...\n#&gt;  $ matrice: int [1:5, 1:20] 1 2 3 4 5 6 7 8 9 10 ...\n\nPosso accedere alla struttura di una lista con il comando str(). Tale comando lo rivedremo anche in seguito e in generale è utile con tutti i tipi di contenitori di R. I singoli gruppi vengono estratti con la sintassi lista[[gruppo]] o lista$gruppo e all’interno del gruppo posso accedere i diversi elementi come visto nelle sezioni precedenti:\n\nlista[[2]]\n#&gt; [1] \"pippo\"  \"ciccio\" \"riccio\"\nlista$testo\n#&gt; [1] \"pippo\"  \"ciccio\" \"riccio\"\nlista$testo[2]\n#&gt; [1] \"ciccio\"\nlista[[4]][2,]\n#&gt;  [1]  2  7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 92 97\nlista[[4]][2,3]\n#&gt; [1] 12\nlista[[3]] &lt;- NULL\n\n\n\n3.2.5 Data frames\nI data frame sono tabelle di dati che possono accogliere nelle loro colonne diverse tipologie di elementi. Rispetto alle liste, si guadagna una maggiore facilità di consultazione ma si perde la possibilità di immagazzinare gruppi di diversa lunghezza: sono comunque la tipologia di dati che incontreremo più frequentemente.\nInternamente R tratta le singole colonne di un data frame come gruppi di una lista.\n\nstr(iris)\n#&gt; 'data.frame':    150 obs. of  5 variables:\n#&gt;  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n#&gt;  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n#&gt;  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n#&gt;  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n#&gt;  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\ndf &lt;- data.frame(lettere = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"),\n                 interi = 1:6,\n                 numeri = rnorm(6))\ndf$numeri\n#&gt; [1] -0.1829260 -1.3792578  1.2506006 -1.8762368 -0.3687876 -2.1292973\ndf$lettere[3]\n#&gt; [1] \"c\"\ndf$lettere[3] &lt;- \"g\"\ndf$sopra3 &lt;- df$interi &gt; 3\ndf$interi &lt;- NULL\n\nPosso estrarre o modificare i nomi delle colonne con la funzione colnames():\n\ncolnames(df)\n#&gt; [1] \"lettere\" \"numeri\"  \"sopra3\"\ncolnames(df)[3] &lt;- \"random\"\n\nI data frame hanno anche la possibilità di specificare nomi per ogni riga: meglio starne alla larga.\nLa sintassi base di R rende spesso complicato filtrare o eseguire operazioni complesse sui data frame. Nel tempo sono quindi nati diversi pacchetti per gestire in modo efficiente queste operazioni. Tra questi si segnalano:\n\ndplyr permette di manipolare i dati tramite la concatenazione di una serie di funzioni i cui nomi in inglese richiamano le operazioni che si intendono eseguire (ad esempio filter(), mutate(), group_by() e molte altre);\ndata.table nato per la manipolazione efficiente di grandi quantità di dati, propone una sintassi che estende quella proposta nella versione base di R: lo vedremo nel prossimo capitolo.\n\n\nEsercizioSoluzione\n\n\nPiero ha preparato 10 prove indipendenti di un campione di acqua per la misura della concentrazione di nitrati, ottenendo i seguenti risultati: 0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98 mg/l, una delle prove non è andata a buon fine e non ha ottenuto alcun risultato.\n\nsalvare i risultati in un contenitore di R appropriato;\ncalcolare la media, la deviazione standard e l’intervallo di confidenza della media (\\(\\alpha\\) = 0.95) delle misure supponendo distribuzioni dei valori di tipo normale.\n\nPina ha preparato altre 10 prove indipendenti dello stesso campione di acqua per la misura della concentrazione di nitrati, ottenendo i seguenti risultati: 1.09, 0.89, 0.74, 1.07, 0.68, 0.89, 1.25, 1.10, 0.86, 0.88 mg/l.\n\nsalvare i risultati ottenuti dai due operatori nello stesso oggetto di R;\ncalcolare l’intervallo di confidenza delle misure ottenute dai due operatori;\nvalutare la presenza di una differenza tra i risultati ottenuti dai due operatori.\n\n\n\n\n# 1\npiero &lt;- c(0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98, NA)\nmean(piero, na.rm = TRUE)\n#&gt; [1] 0.8655556\nsd(piero, na.rm = TRUE)\n#&gt; [1] 0.119385\nn &lt;- piero[!is.na(piero)] |&gt; length() # immaginate un altro modo\n\nci &lt;- function(data, alfa = 0.975){\n  stopifnot(is.numeric(data))\n  stopifnot(is.numeric(alfa))\n  stopifnot(alfa &gt; 0 &  alfa &lt;= 1)\n  \n  n &lt;- sum(!is.na(data))\n  \n  mean(data, na.rm = TRUE) +\n    c(-1, 1) * qt(alfa, n - 1) * sd(data, na.rm = TRUE) / sqrt(n)\n}\n\nci(piero)\n#&gt; [1] 0.7737881 0.9573230\n\n# 2\nrisultati &lt;- data.frame(piero = piero,\n                        pina = c(1.09, 0.89, 0.74, 1.07, 0.68,\n                                 0.89, 1.25, 1.10, 0.86, 0.88))\nlapply(risultati, ci)\n#&gt; $piero\n#&gt; [1] 0.7737881 0.9573230\n#&gt; \n#&gt; $pina\n#&gt; [1] 0.8180479 1.0719521\nt.test(risultati$piero, risultati$pina)\n#&gt; \n#&gt;  Welch Two Sample t-test\n#&gt; \n#&gt; data:  risultati$piero and risultati$pina\n#&gt; t = -1.1548, df = 15.825, p-value = 0.2653\n#&gt; alternative hypothesis: true difference in means is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  -0.22541955  0.06653066\n#&gt; sample estimates:\n#&gt; mean of x mean of y \n#&gt; 0.8655556 0.9450000",
    "crumbs": [
      "Le basi",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Oggetti di R</span>"
    ]
  }
]