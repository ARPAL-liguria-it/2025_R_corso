# Unire diverse fonti di dati {#sec-join}

```{r}
#| echo: false
source("_common.R")
```

## Tipologie di unioni

Quando si lavora con i dati, capita spesso di dover combinare due insiemi di dati basandosi su una o più colonne chiave comuni. Questo processo si chiama *join* o *merge* ed è essenziale per integrare informazioni provenienti da fonti diverse.

Prendiamo come esempio due `data.table`:

- `misure` contiene i risultati analitici di una serie di campioni;
- `indirizzi`: contiene le informazioni relative ai punti di prelievo.

Per collegare queste due tabelle serve una colonna in comune, che nel nostro caso è il codice del campione:

```{r}
misure <- data.table(
  codice = c("22201/24", "22248/24", "22311/24", "22312/24"),
  data_campionamento = as.IDate(c("2024-01-15", "2024-02-20", "2024-03-10", "2024-03-10")),
  cadmio = c(0.05, 0.06, 0.04, 0.06),
  piombo = c(0.1, 0.15, 0.12, 0.11),
  arsenico = c(0.08, 0.09, 0.05, NA)
    )

indirizzi <- data.table(
  codice = c("22311/24", "22248/24", "22412/24"),
  comune = c("Paperopoli", "Topolinia", "Topolinia"),
  provincia = c("SV", "IM", "IM"),
  via = c("corso Papero", "via de Topis", "via Ratti"),
  civico = c("12", "11/10", "8R")
)
```

Notiamo che:

- non tutti i codici di `misure` sono presenti in `indirizzi`;
- non tutti i codici di `indirizzi` compaiono in `misure`.

Prima di unire le tabelle, dobbiamo quindi decidere come gestire i dati senza corrispondenza: questa scelta determina il tipo di *join* da utilizzare.

### Inner join {#sec-inner}

Se vogliamo mantenere solo i campioni per cui sono disponibili sia le misure che l'indirizzo, useremo un *inner join.* In termini di insiemi, corrisponde all’intersezione $A \cap B$, come mostrato in @fig-inner.

![Inner join ($A \cap B$): vengono restituite solo le righe di A che compaiono anche in B.](images/inner_join.png){#fig-inner}

Con `data.table` la sintassi è:

```{r}
misure[indirizzi, # le tabelle
       on = "codice", # la colonna chiave
       nomatch = NULL] # assegno NULL ai record senza corrispondenza
```

Se le colonne chiave hanno nomi diversi, possiamo specificare on come coppia di nomi, ad esempio `on = .(codice_misure = codice_indirizzi)`. È possibile anche effettuare unioni su più colonne.

### Right e left join {#sec-left}

Se vogliamo mantenere tutti i campioni con indirizzo, aggiungendo le misure quando disponibili, useremo un *right join*. In termini insiemistici $B\cup(A\cap B)$ dove $B$ sono gli indirizzi e $A$ le misure, come mostrato in @fig-right.

![Right join ($B \cup (A \cap B)$): vengono restituite tutte le righe di B, completate con le informazioni contenute in A, quando disponibili.](images/right_join.png){#fig-right}

Ecco la sintassi:

```{r}
misure[indirizzi, # le tabelle
       on = "codice", # la colonna chiave
       nomatch = NA] # assegno NA ai record senza corrispondenza
```

Ricordiamo che nella sintassi `x[i]` di `data.table`:

- tutte le righe di `i` (`indirizzi` nell'esempio) sono mantenute;
- le colonne di `x` (`misure` nell'esempio) sono aggiunte solo se c'è corrispondenza, altrimenti sono `NA`.

Per un *left join* (tutte le misure, con indirizzo se disponibile), basta invertire le tabelle:

```{r}
indirizzi[misure, # le tabelle
       on = "codice", # la colonna chiave
       nomatch = NA] # assegno NA ai record senza corrispondenza
```

::: {.callout-tip}

## Per i più frettolosi

Il valore predefinito dell'argomento `nomatch` è `NA`: possiamo quindi ometterlo per *right* e *left join*.

:::

### Full join

Se vogliamo mantenere tutti i dati di entrambe le tabelle, mettendoli in relazione quando possibile e inserendo `NA` in assenza di corrispondenza, usiamo un *full join*. In termini di insiemi, è l'unione $A \cup B$ , come mostrato in @fig-full.

![Full join ($A \cup B$): vengono restituite tutte le righe di A e B, in caso di mancanza di corrispondenza tra i valori si utilizzano `NA`.](images/full_join.png){#fig-full}

La sintassi prevede la funzione `merge()`:
```{r}
merge(misure, indirizzi, by = "codice", all = TRUE)
```

Se le colonne chiave hanno nomi diversi, usiamo `by.x` e `by.y`. Entrambi possono essere vettori con più di un elemento, per effettuare unioni su più colonne.

::: callout-tip
## Per i più golosi

Con il comando `vignette("datatable-joins")` è possible avere informazioni aggiuntive sull'unione di serie di dati con il pacchetto `data.table`.
:::

::: panel-tabset
## Esercizio

Unire i dataset `pm_genova` e `stazioni` creati nella @sec-datatable:

- qual è la chiave che mette in relazione i due dataset?
- quale tipo di *join* usare per mantenere solo le misure associate a stazioni e viceversa?
- eseguire il *join* e salvare il risultato in `pm_genova_completo`;
- controllare la tipologia delle colonne di `pm_genova_completo` e correggerle se necessarie;
- verificare quali stazioni e righe sono state perse passando da `pm_genova` a `pm_genova_completo`.

## Soluzione

- La chiave è il codice univoco della stazione: `codice_europeo` in `pm_genova` e `station_eu_code` in `stazioni`;
- serve un *inner join* ($A \cap B$);
- ecco il codice:

  ```{r}
  #| echo: false
  pm_genova <- pm_genova_int1()
  stazioni <- stazioni_int1()
  ```

  ```{r}
  pm_genova_completo <- pm_genova[stazioni,
                            # la lista identifica le colonne in relazione
                            # in data.table .() equivale a list()
                            on = .(codice_europeo = station_eu_code),
                            nomatch = NULL]
  ```
- con `str(pm_genova_completo)` si nota che `tipo_zona` e `tipo_stazione` sono `character` invece che `factor`. Si corregge così:

  ```{r}
  pm_genova_completo[, `:=` (
    tipo_zona = factor(tipo_zona),
    tipo_stazione = factor(tipo_stazione)
  )]
  ```
- per identificare stazioni e righe perse:

  ```{r}
  pm_genova[codice_europeo %notin% pm_genova_completo[, codice_europeo],
            unique(codice_europeo)]
  
  pm_genova[codice_europeo %notin% pm_genova_completo[, codice_europeo],
            .N]
  ```
  
  abbiamo perso circa il `r (100 * (1 - (pm_genova_completo[, .N] / pm_genova[,.N]))) |> round(0)`% dei dati, probabilmente per codifiche errate o mancanti.

:::

