# Report riproducibili {#sec-report}

```{r}
#| echo: false
source("_common.R")
```

## I documenti Quarto {#sec-quarto}

Nei capitoli precedenti abbiamo utilizzato gli script di R per organizzare il codice, aggiungendo commenti per spiegare il funzionamento di porzioni particolarmente ostiche. Tuttavia, un progetto di analisi dei dati reale può durare mesi, con la creazione di un numero elevato di script, collegati a porzioni di testo fondamentali per l'analisi ma che non sono sotto forma di codice. Nei contesti descritti è necessario un altro strumento: **quarto**.

**Quarto** è un sistema di pubblicazione *open source*, evoluzione di **R Markdown**, che permette di creare documenti dinamici e riproducibili combinando testo, codice e risultati in un unico file con estensione .qmd. Supporta diversi linguaggi (`R`, `Python`, `Julia`) e può generare output in HTML, PDF, Word, presentazioni e altro: questo libro è stato interamente creato utilizzando **quarto**.

Creare un documento **quarto** da RStudio è semplice:

1. vai su **File > New File > Quarto Document**;
2. inserisci titolo e autore nel pannello di creazione;
3. scegli il formato di output (default HTML, ma puoi selezionare PDF, Word, ecc.);
4. viene creato un file `.qmd` con un'intestazione YAML simile a:

```` markdown
---
title: "Titolo del documento"
author: "Nome Autore"
format: html
---
````

Qui possiamo specificare il titolo, l'autore e il formato di output del documento. Sempre nell'intestazione è possibile aggiungere altri elementi, come ad esempio `lang: it` per specificare che il documento è redatto in italiano.

Possiamo iniziare a scrivere il nostro primo documento alternando testo e codice.

### Il testo

Possiamo inserire il testo all'interno di un documento di **quarto** semplicemente scrivendo al di sotto dell'intestazione e utilizzando la tipica sintassi **markdown**, ormai sempre più diffusa. Vediamo un esempio aggiungendo del testo:

```` markdown

---
title: "Il mio primo documento con Quarto"
author: "Proprio io"
format: html
lang: it
---
    
# Questo è un titolo di livello uno {#sec-riferimento}

Ora scrivo semplicemente del testo poi metto una parola in *corsivo* e una in **neretto**.

## Questo un sottotitolo di livello due

Qui faccio vedere che so organizzare le idee facendo un elenco puntato:

- carote;
- patate;
- cipolle.

Faccio anche un elenco numerato:

1. arrivò il toro;
2. che bevvé l'acqua;
3. che spense il fuoco;
4. che bruciò il bastone;
5. che picchiò il cane;
6. che morse il gatto;
7. che mangiò il topo;
8. che al mercato mio padre comprò.

### Questo è un elenco di terzo livello

Posso esagerare con un'equazione in linea $c^2 = \sqrt{a^2 + b^2}$ o una fuori corpo:

$$
i \hbar \frac{\partial \Psi}{\partial t} (\mathbf{r}, t) = \hat{H} \Psi (\mathbf{r}, t) 
$$

E così finisce la @sec-riferimento.

````

Per vedere il risultato, si può cliccare il tasto ![](images/render.png){height=25}.

### Il codice

Per inserire del codice all'interno del documento è sufficiente schiacciare i tasti Ctrl + Alt + I: lo spezzone (*chunk*) di codice inizierà con `` ```{r} `` e terminerà con `` ``` `` e al suo interno possiamo inserire del normale codice di R:

```` markdown
```{{r}}
summary(mtcars)
```
````

È consigliabile associare a ogni spezzone di codice un'etichetta univoca che descriva brevemente cosa fa il codice e questo lo si può fare specificando l'opzione `label`, come di seguito:

```` markdown
```{{r}}
#| label: summary-mtcars
summary(mtcars)
```
````
Il campo `label` non ammette spazi e l'unico carattere speciale ammesso è `-`.
Nel caso di spezzoni di codice che generano grafici o tabelle, è buona norma impostare l'etichetta rispettivamente come `#| label: fig-qualcosa` e `#| label: tbl-qualcosa`: così facendo si potrà fare riferimento nel testo alla figura e alla tabella scrivendo rispettivamente `@fig-qualcosa` o `@tbl-qualcosa`.

Oltre a `label` è possibile specificare altre opzioni che regolano la visibilità e il comportamento del codice. Tra le più usate abbiamo:

- `echo`: regola la visibilità del codice all'interno dello spezzone. Il valore predefinito è `TRUE` e comporta la visibilità nel documento finale sia del codice presente all'interno dello spezzone, sia del suo risultato. Impostando `FALSE` si vede solo il risultato del codice.
- `message` o `warning`: impostandoli su `FALSE` si evita l'inclusione di messaggio o avvisi all'interno del documento finale.
- `fig-cap` e `tbl-cap`: imposta la didascalia di figure e tabelle e accetta una stringa di testo tra virgolette.

Tutte le opzioni vanno specificate all'inizio dello spezzone e facendole precedere da `#|`.

È anche possibile specificare piccole porzioni di codice il cui risultato verrà visualizzato in linea con il testo. Ecco un esempio:

scrivendo

> il dataset `mtcars` contiene i dati di `` `r knitr::inline_expr("nrow(mtcars)")` `` modelli di automobili, ciascuno classificato sulla base di `` `r  knitr::inline_expr("ncol(mtcars)")` `` variabili. 

viene visualizzato

> il dataset `mtcars` contiene i dati di `r nrow(mtcars)` modelli di automobili, ciascuno classificato sulla base di `r ncol(mtcars)` variabili.

### Le tabelle

All'interno di documenti Quarto è possibile visualizzare dataset come tabelle opportunamente formattate utilizzando il pacchetto `gt`. Tale pacchetto permette di personalizzare nel dettaglio la visualizzazione delle tabelle, impostando i nomi delle colonne, le colonne da unire e la formattazione dei valori numerici. Ecco un semplice esempio riadattato dalla documentazione ufficiale di `gt`:

```{r}
#| label: tbl-airquality
#| tbl-cap: "`gt` fa delle tabelle che spaccano."
library(gt)

airquality |>
  head(20) |>
  gt() |>
  fmt_number(Wind, n_sigfig = 2) |>                 # 2 cifre significative
  cols_label(                                       # nomi delle colonne
    Ozone = html("Ozono,<br>ppbV"),
    Solar.R = html("Solar R.,<br>cal/m<sup>2</sup>"),
    Wind = html("Vento,<br>mph"),
    Temp = html("Temp,<br>&deg;F")
  ) |>                                              # sovra intestazione
  tab_spanner(
    label = "Tempo",
    columns = c(Month, Day)
  ) |>
  tab_spanner(
    label = "Misure",
    columns = c(Ozone, Solar.R, Wind, Temp)
  )
```

### Uniamo i puntini

Abbiamo tutti gli elementi per un documento di esempio. Per semplificarci la vita, impostiamo nell'intestazione `echo`, `warning` e `message` come `FALSE` di default, così non vedremo il codice, senza doverlo specificare all'interno di ogni spezzone.

```` markdown
---
title: "Analisi importanti"
author: "Pico de Paperis, Ph.D."
lang: it
format: html
execute:
  echo: false
  message: false
  warning: false
---

# Introduzione

Le analisi del piombo, cadmio e arsenico sono di vitale importanza: fortuna che ci sono io che le faccio! Sentendomi particolarmente generoso condivido con voi i risultati trovati in alcuni campioni selezionati.

# Metodo

1. Ho acceso il computer;
2. ho preso i campioni;
3. li ho messi nello strumento;
4. ho letto i numeri;
5. ho calcolato $\pi r^2$;
6. ho trascritto i numeri;
7. **applausi**.

# Risultati {#sec-risultati}

In @tbl-misure trovate i miei risultati e in @fig-pbas c'è pure un bel grafico.

```{{r}}
#| label: carico-dati
library(data.table)

misure <- data.table(
  codice = c("22201/24", "22248/24", "22311/24", "22312/24"),
  data_campionamento = as.IDate(c("2024-01-15", "2024-02-20", "2024-03-10", "2024-03-10")),
  cadmio = c(0.05, 0.06, 0.04, 0.06),
  piombo = c(0.1, 0.15, 0.12, 0.11),
  arsenico = c(0.08, 0.09, 0.05, NA)
    )
```

```{{r}}
#| label: tbl-misure
#| tbl-cap: "La tabella con i risultati."
library(gt)

misure |>
  gt() |>
  fmt_number(
    c(cadmio, piombo, arsenico),
    n_sigfig = 2) |>
  cols_label(
    codice = "Codice campione",
    data_campionamento = "Data di campionamento",
    cadmio = "Cd",
    piombo = "Pb",
    arsenico = "As"
  ) |>
  tab_spanner(
    label = "Metalli (µg/l)",
    columns = c(cadmio, piombo, arsenico)
  )
```


```{{r}}
#| label: fig-pbas
#| fig-cap: "Grafico di dispersione della concentrazione di piombo e arsenico."
library(ggplot2)

misure |>                          
  ggplot(aes(x = piombo,            
             y = arsenico)) +      
  geom_point() +                    
  geom_hline(yintercept = 0.07,
              col = "red",
              linetype = "dashed") +
  labs(                             
    title = "Relazione tra piombo e arsenico nei campioni di acqua del 2024",
    x = "Piombo (µg/l)",
    y = "Arsenico (µg/l)"
  ) +
  theme_bw()   
```

# Conclusioni

Come mostrato nella @sec-risultati, sono proprio bravo.

````

- esercizio su pm_genova
- revisione


