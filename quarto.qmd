# Report riproducibili {#sec-report}

```{r}
#| echo: false
source("_common.R")
```

In questo capitolo imparerai a utilizzare **Quarto**, uno strumento potente per creare documenti dinamici e professionali con R. Vedrai come integrare codice, testo e output in un unico file, gestire formattazioni avanzate e produrre report chiari e personalizzati. Imparerai anche a inserire tabelle e grafici in modo efficace, migliorando la comunicazione e la riproducibilità dei risultati delle tue analisi.

## I documenti Quarto {#sec-quarto}

Nei capitoli precedenti abbiamo visto come organizzare il codice in R, aggiungendo commenti per chiarire le parti più complesse. Tuttavia, in progetti di analisi dati complessi, è necessario integrare anche documentazione testuale per collegare il codice ai risultati. In questi casi, **Quarto** si rivela uno strumento utile.

**Quarto** è una piattaforma *open source* che permette di creare documenti dinamici e riproducibili combinando testo, codice e risultati in un unico file `.qmd`. Supporta linguaggi come `R`, `Python` e `Julia`, e consente di generare output in vari formati (HTML, PDF, Word).

**Quarto** permette di aggiornare automaticamente i risultati a ogni cambiamento di codice o dati, garantendo coerenza e riducendo il rischio di errori. Inoltre, supportando più linguaggi di programmazione, facilita lavori collaborativi, evitando di doversi preoccupare di conoscere tutti lo stesso codice. La sua natura riproducibile assicura trasparenza e tracciabilità, aspetti essenziali per l'affidabilità dei risultati.

Creare un documento **quarto** da RStudio è semplice:

1. vai su **File > New File > Quarto Document**;
2. inserisci titolo e autore nel pannello di creazione;
3. scegli il formato di output (default HTML, ma puoi selezionare PDF, Word, ecc.);
4. viene creato un file `.qmd` con un'intestazione YAML simile a:

```` markdown
---
title: "Titolo del documento"
author: "Nome Autore"
format: html
---
````

Qui possiamo specificare il titolo, l'autore e il formato di output del documento. Sempre nell'intestazione è possibile aggiungere altri elementi, come ad esempio `lang: it` per specificare che il documento è redatto in italiano.

Possiamo iniziare a scrivere il nostro primo documento alternando testo e codice.

### Il testo

Possiamo inserire il testo all'interno di un documento di **quarto** semplicemente scrivendo al di sotto dell'intestazione e utilizzando la tipica sintassi **markdown**, ormai sempre più diffusa. Vediamo un esempio aggiungendo del testo:

```` markdown

---
title: "Il mio primo documento con Quarto"
author: "Proprio io"
format: html
lang: it
---
    
# Questo è un titolo di livello uno {#sec-riferimento}

Ora scrivo semplicemente del testo poi metto una parola in *corsivo* e una in **neretto**.

## Questo un sottotitolo di livello due

Qui faccio vedere che so organizzare le idee facendo un elenco puntato:

- carote;
- patate;
- cipolle.

Faccio anche un elenco numerato:

1. arrivò il toro;
2. che bevvé l'acqua;
3. che spense il fuoco;
4. che bruciò il bastone;
5. che picchiò il cane;
6. che morse il gatto;
7. che mangiò il topo;
8. che al mercato mio padre comprò.

### Questo è un elenco di terzo livello

Posso esagerare con un'equazione in linea $c^2 = \sqrt{a^2 + b^2}$ o una fuori corpo:

$$
i \hbar \frac{\partial \Psi}{\partial t} (\mathbf{r}, t) = \hat{H} \Psi (\mathbf{r}, t) 
$$

E così finisce la @sec-riferimento.

````

Per vedere il risultato, si può cliccare il tasto ![](images/render.png){height=25}.

### Il codice

Per inserire del codice all'interno del documento è sufficiente schiacciare i tasti Ctrl + Alt + I: lo spezzone (*chunk*) di codice inizierà con `` ```{r} `` e terminerà con `` ``` `` e al suo interno possiamo inserire del normale codice di R:

```` markdown
```{{r}}
summary(mtcars)
```
````

È consigliabile associare a ogni spezzone di codice un'etichetta univoca che descriva brevemente cosa fa il codice e questo lo si può fare specificando l'opzione `label`, come di seguito:

```` markdown
```{{r}}
#| label: summary-mtcars
summary(mtcars)
```
````
Il campo `label` non ammette spazi e l'unico carattere speciale ammesso è `-`.
Nel caso di spezzoni di codice che generano grafici o tabelle, è buona norma impostare l'etichetta rispettivamente come `#| label: fig-qualcosa` e `#| label: tbl-qualcosa`: così facendo si potrà fare riferimento nel testo alla figura e alla tabella scrivendo rispettivamente `@fig-qualcosa` o `@tbl-qualcosa`.

Oltre a `label` è possibile specificare altre opzioni che regolano la visibilità e il comportamento del codice. Tra le più usate abbiamo:

- `echo`: regola la visibilità del codice all'interno dello spezzone. Il valore predefinito è `TRUE` e comporta la visibilità nel documento finale sia del codice presente all'interno dello spezzone, sia del suo risultato. Impostando `FALSE` si vede solo il risultato del codice.
- `message` o `warning`: impostandoli su `FALSE` si evita l'inclusione di messaggio o avvisi all'interno del documento finale.
- `fig-cap` e `tbl-cap`: imposta la didascalia di figure e tabelle e accetta una stringa di testo tra virgolette.

Tutte le opzioni vanno specificate all'inizio dello spezzone e facendole precedere da `#|`.

È anche possibile specificare piccole porzioni di codice il cui risultato verrà visualizzato in linea con il testo. Ecco un esempio:

scrivendo

> il dataset `mtcars` contiene i dati di `` `r knitr::inline_expr("nrow(mtcars)")` `` modelli di automobili, ciascuno classificato sulla base di `` `r  knitr::inline_expr("ncol(mtcars)")` `` variabili. 

viene visualizzato

> il dataset `mtcars` contiene i dati di `r nrow(mtcars)` modelli di automobili, ciascuno classificato sulla base di `r ncol(mtcars)` variabili.

### Le tabelle

All'interno di documenti Quarto è possibile visualizzare dataset come tabelle opportunamente formattate utilizzando il pacchetto `gt`. Tale pacchetto permette di personalizzare nel dettaglio la visualizzazione delle tabelle, impostando i nomi delle colonne, le colonne da unire e la formattazione dei valori numerici. Ecco un semplice esempio riadattato dalla documentazione ufficiale di `gt`:

```{r}
#| label: tbl-airquality
#| tbl-cap: "`gt` fa delle tabelle che spaccano."
library(gt)

airquality |>
  head(20) |>
  gt() |>
  fmt_number(Wind, n_sigfig = 2) |>                 # 2 cifre significative
  cols_label(                                       # nomi delle colonne
    Ozone = html("Ozono,<br>({{ppbV}})"),
    Solar.R = html("Solar R.,<br>({{cal/m^2}})"),
    Wind = html("Vento,<br>({{mph}})"),
    Temp = html("Temp,<br>({{degF}})"),
    Month = "Mese",
    Day = "Giorno"
  ) |>                                              # sovra intestazione
  tab_spanner(
    label = "Tempo",
    columns = c(Month, Day)
  ) |>
  tab_spanner(
    label = "Misure",
    columns = c(Ozone, Solar.R, Wind, Temp)
  )
```

### Uniamo i puntini

Abbiamo tutti gli elementi per creare un documento di esempio. Per semplificarci la vita, impostiamo nell'intestazione `echo`, `warning` e `message` come `FALSE`, così non vedremo il codice senza doverlo specificare all'interno di ogni spezzone.

```` markdown
---
title: "Analisi importanti"
author: "Pico de Paperis, Ph.D."
lang: it
format: html
execute:
  echo: false
  message: false
  warning: false
---

# Introduzione

Le analisi del piombo, cadmio e arsenico sono di vitale importanza: 
fortuna che ci sono io che le faccio!
Sentendomi particolarmente generoso condivido con voi i risultati 
trovati in alcuni campioni selezionati.

# Metodo

1. Ho acceso il computer;
2. ho preso i campioni;
3. li ho messi nello strumento;
4. ho letto i numeri;
5. ho calcolato $\pi r^2$;
6. ho trascritto i numeri;
7. **applausi**.

# Risultati {#sec-risultati}

In @tbl-misure trovate i miei risultati e in @fig-pbas c'è pure un bel grafico.

```{{r}}
#| label: carico-dati
library(data.table)

misure <- data.table(
  codice = c("22201/24", "22248/24", "22311/24", "22312/24"),
  data_campionamento = c("2024-01-15", "2024-02-20", "2024-03-10", "2024-03-10") |>
    as.IDate(),
  cadmio = c(0.05, 0.06, 0.04, 0.06),
  piombo = c(0.1, 0.15, 0.12, 0.11),
  arsenico = c(0.08, 0.09, 0.05, NA)
    )
```

```{{r}}
#| label: tbl-misure
#| tbl-cap: "La tabella con i risultati."
library(gt)

misure |>
  gt() |>
  fmt_number(
    c(cadmio, piombo, arsenico),
    n_sigfig = 2) |>
  cols_label(
    codice = "Codice campione",
    data_campionamento = "Data di campionamento",
    cadmio = "Cd",
    piombo = "Pb",
    arsenico = "As"
  ) |>
  tab_spanner(
    label = "Metalli (µg/l)",
    columns = c(cadmio, piombo, arsenico)
  )
```


```{{r}}
#| label: fig-pbas
#| fig-cap: "Grafico di dispersione della concentrazione di piombo e arsenico."
library(ggplot2)

misure |>                          
  ggplot(aes(x = piombo,            
             y = arsenico)) +      
  geom_point() +                    
  geom_hline(yintercept = 0.07,
              col = "red",
              linetype = "dashed") +
  labs(                             
    title = "Relazione tra piombo e arsenico nei campioni di acqua del 2024",
    x = "Piombo (µg/l)",
    y = "Arsenico (µg/l)"
  ) +
  theme_bw()   
```

# Conclusioni

Come mostrato nella @sec-risultati, sono proprio bravo.

````

::: {.callout-tip}

## Per i più golosi

All'indirizzo [quarto.org](https://quarto.org) è possibile consultare la documentazione ufficiale.

:::

:::: {.panel-tabset}

## Esercizio

Includere le modifiche eseguite sul dataset `pm_genova` e simulare un report in un documento di **quarto**.


## Soluzione

```` markdown
---
title: "Particolato atmosferico campionato nella provincia di Genova nel 2024"
author: "Nome, Cognome"
lang: it
format: html
execute:
  echo: false
  message: false
  warning: false
---

# Introduzione

Il decreto legislativo 155/2010 attua la direttiva 2008/50/CE 
relativa alla qualità dell'aria ambiente e per un'aria più pulita
in Europa e prevede il monitoraggio delle concentrazioni in aria
di diverse specie. Tra queste figura il particolato atmosferico
con diametro aerodinamico inferiore a 10 μm (PM~10~) e 2,5 μm (PM~2,5~).

ARPAL gestisce la rete regionale ligure di rilevamento della qualità
dell'aria e in questo report sono riassunti i valori di concentrazione
di PM~10~ e PM~2,5~ misurati nel 2024 presso i comuni monitorati
dalle stazioni di monitoraggio collocate nella provincia di Genova.

# Metodo

Dal sito [Ambiente in Liguria](https://www.banchedati.ambienteinliguria.it/)
sono stati scaricati in formato .csv i dati relativi al PM~10~ e PM~2,5~ 
misurati nel 2024 presso le stazioni di monitoraggio collocate
nella provincia di Genova.
A scopo didattico sono state rimosse le informazioni relative alle stazioni
di monitoraggio, lasciando il solo codice europeo della stazione.
Il file risultante è stato quindi compresso in formato .gz.

```{{r}}
#| label: carico-dati-aria
library(data.table)

pm_genova <- fread("data/2025-04-24_pm1025_ambiente_liguria.csv.gz",
                   skip = "Codice europeo",
                   encoding = "Latin-1")   
```

```{{r}}
#| label: cleaning-dati-aria

colnames(pm_genova) <- colnames(pm_genova) |> 
  tolower() |>                  # trasforma in minuscolo
  gsub(" ", "_", x = _) |>      # sostituisce gli spazi con uderscore
  iconv(to = "ASCII//TRANSLIT") # rimuove accenti e caratteri speciali  

pm_genova[, valido := fcase(valido == "SI", TRUE,
                            valido == "NO", FALSE,
                            default = NA)]
                            
pm_genova[, `:=` (
  # standardizza le unità
  udm = gsub("microg/m3", "µg/m³", unita_di_misura),
  # converte validato cor e certificato in valori logici
  validato_cor = fcase(validato_cor == "SI", TRUE,
                       validato_cor == "NO", FALSE,
                       default = NA),
  certificato = fcase(certificato == "SI", TRUE,
                      certificato == "NO", FALSE,
                      default = NA),
  # converte le date specificando il formato di input
  inizio = as.POSIXct(data_inizio, format = "%d/%m/%Y %H:%M", tz = "GMT"),
  fine = as.POSIXct(data_fine, format = "%d/%m/%Y %H:%M", tz = "GMT"),
  # elimina le vecchie colonne non più utili
  unita_di_misura = NULL,
  data_inizio = NULL,
  data_fine = NULL
)]

```

I dati relativi alle stazioni di monitoraggio italiane è stato scaricato
dalla sezione [Dati e indicatori - Aria del sito dell'istituto superiore
per la protezione e la ricerca ambientale
(ISPRA)](https://www.isprambiente.gov.it/it/banche-dati/).

```{{r}}
#| label: carico-dati-stazioni
library(readxl)

stazioni <- read_excel("data/2025-04-24_anagrafica_stazioni.xlsx",
                       sheet = "Tabella 1") |> 
  setDT() 
```

```{{r}}
#| label: join-data

pm_genova_completo <- pm_genova[stazioni,
                          # la lista identifica le colonne in relazione
                          # in data.table .() equivale a list()
                          on = .(codice_europeo = station_eu_code),
                          nomatch = NULL]
                          
pm_genova_completo[, `:=` (
    tipo_zona = factor(tipo_zona),
    tipo_stazione = factor(tipo_stazione)
  )]
```

Le elaborazioni sono state eseguite con [R](https://www.r-project.org/).

# Risultati {#sec-risultati}

La @tbl-misure riassume i valori di concentrazione di PM~10~ misurati
presso le stazioni di monitoraggio della provincia di Genova nel 2024,
mentre in @fig-misure sono mostrate le concentrazioni medie giornaliere
raggruppate per comune.

```{{r}}
#| label: daily-data

pm_genova_daily <- pm_genova_completo[,
  .(avg = mean(valore, na.rm = TRUE),
    sd = sd(valore, na.rm = TRUE),
    min = min(valore, na.rm = TRUE),
    max = max(valore, na.rm = TRUE),
    n_valori = (!is.na(valore)) |> length()),
  by = .(codice_europeo,
         comune,
         nome_stazione,
         giorno = yday(inizio),
         inquinante)]
```

```{{r}}
#| label: above50-data

pm_genova_above50 <- pm_genova_daily[, .(avg = mean(avg, na.rm = TRUE),
                                         val_50 = (avg > 50) |> sum(na.rm = TRUE)),
                                      by = .(nome_stazione,
                                             comune)][order(-val_50)]
```

```{{r}}
#| label: tbl-misure
#| tbl-cap: "Concentrazione di PM~10~ in provincia di Genova nel 2024."
library(gt)

pm_genova_above50 |>
  gt() |>
  cols_label(
    nome_stazione = "Stazione",
    comune = "Comune",
    avg = md("Media PM~10~ ({{:mu:g/m^3}})"),
    val_50 = "n > 50 {{:mu:g/m^3}}"
  ) |>
  fmt_number(
    columns = avg,
    decimals = 0
  ) |>
  tab_footnote(
  footnote = "Media annuale dei valori di concentrazione medi giornalieri.",
  locations = cells_column_labels(columns = avg)
  )
  
```


```{{r}}
#| label: fig-misure
#| fig-cap: "Concentrazione di PM~10~ e PM~2,5~ in provincia di Genova nel 2024."
library(ggplot2)

pm_genova_daily |>
  ggplot(
  aes(x = comune, y = avg)
  ) +
  geom_boxplot() +
  # limite solo per PM10
  geom_hline(
    data = pm_genova_daily[inquinante == "PM10"],
    aes(yintercept = 50),
    col = "red",
    linetype = "dashed"
    ) +
  facet_wrap(vars(inquinante)) +
  labs(
    x = element_blank(),
    y = expression("Concentrazione media giornaliera " * (mu * g / m^{3}))
  ) +
  theme_bw()
```

La stazione con più valori di PM~10~ superiori al limite giornaliero
di $50\, \mu g/m^3$ è 
`r knitr::inline_expr("pm_genova_above50[which.max(val_50), nome_stazione]")`, nel comune di 
`r knitr::inline_expr("pm_genova_above50[which.max(val_50), comune]")`, con 
`r knitr::inline_expr("pm_genova_above50[which.max(val_50), val_50]")` superamenti.

```` 

::::

