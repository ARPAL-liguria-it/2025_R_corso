#  Oggetti di R {#sec-objects}

```{r}
#| echo: false
source("_common.R")
```

## Tipologie di elementi {#sec-typeof}

Prima di vedere le classi di oggetti di R, che possiamo pensare come diverse tipologie di contenitori, è bene dare uno sguardo alle tipologie di elementi che possiamo inserire in questi contenitori.

Quando saremo in dubbio sulla tipologia di un dato elemento possiamo usare la funzione `typeof()`.

### Numeri

R gestisce diversi tipi di numeri, ma nella maggior parte dei casi useremo il tipo `double`.
Questo significa che i numeri con la virgola (decimali) sono memorizzati con precisione elevata, permettendo di rappresentare valori molto precisi.
Anche i numeri interi (come 5) sono memorizzati come `double`, a meno che non specifichiamo esplicitamente il tipo `integer` aggiungendo una `L` (es. `5L`). Ogni misura - ad eccezione dei conteggi puri - ricade in questa tipologia, anche se dovesse avere valore intero (es. 5). L'Utilizzo di elementi di tipo `double` è semplice:

```{r}
a <- c(2, 2.1, 2.5) # double
b <- c(1L, 5L)      # integer
```

Altre tipologie di numeri più rare comprendono i tipi `complex` e `raw`, rispettivamente per numeri complessi e bytes: non le utilizzeremo.

Alcune operazioni matematiche possono generare numeri particolari come `NaN` (*not a number*), `Inf` e `-Inf`. Il primo si ottiene, ad esempio, dividendo zero per zero, mentre gli ultimi dividendo un numero positivo o negativo per zero. Per verificare se un numero è `NaN` o `Inf`, si usano rispettivamente le funzioni `is.nan()` e `is.infinite()`.

### Testo

R usa una singola tipologia per le stringhe di testo: indipendentemente dalla loro lunghezza saranno tutte `character` e si creano racchiudendo il testo tra virgolette (singole o doppie; in questo corso utilizzeremo sempre le doppie virgolette):

```{r}
c <- "roba"
```

Talvolta, i numeri possono essere erroneamente archiviati come testo. Questo è un risultato indesiderato ma abbastanza frequente quando si importano dati non ben ripulit. Per riconvertirli in numeri, si usa la funzione `as.numeric()`.

### Logici

Gli elementi logici possono assumere esclusivamente valore `TRUE` o `FALSE`. Raramente vengono assegnati direttamente a una variabile, ma compaiono spesso a seguito di un'operazione logica:

```{r}
d <- 3 < 5
d
typeof(d)

e <- 3 == 3L
```

Internamente, R li tratta come interi pari a 1 (`TRUE`) o 0 (`FALSE`).

### Elementi mancanti ed elementi nulli

R identifica gli elementi mancanti con `NA` (*not available*). `NA` rappresenta una tipologia particolare, in quanto diventa di tipo testo, numero o valore logico a seconda del contesto. In genere, le operazioni eseguite su gruppi di elementi in cui uno o più elementi sono `NA` restituiscono `NA`.
Si può verificare se un elemento è di tipo `NA` con la funzione `is.na()`.

Talvolta, R può restituire un elemento di tipo `NULL` quando si tenta di estrarre un elemento inesistente da un oggetto. Più comunemente, è possibile assegnare il valore `NULL` a un oggetto per eliminarne il contenuto:

```{r}
c()
a
a <- NULL
a
```

## Tipologie di contenitori {#sec-classes}

### Vettori

Un vettore è un insieme ordinato di valori, tutti appartenenti alla stessa tipologia. Tutte le variabili create nella @sec-typeof sono esempi di vettori: anche se alcuni contengono solo numeri, testo o valori logici, essi non contengono mai elementi di tipologie diverse e possiedono una sola dimensione.

Tecnicamente, i vettori non sono catalogati da R all'interno di una classe, tuttavia è comodo vederli come la più semplice delle classi, intendendo con questo termine - per semplicità - una tipologia di contenitore di elementi.

È possibile accedere ai diversi elementi di un vettore utilizzando la notazione: `vettore[indici]` dove `indici` è a sua volta un vettore di elementi da includere o escludere. Esempi:

```{r}
f <- c("a", "b", "c", NA, "e")
f[1]          # seleziona il primo elemento
f[-1]         # seleziona tutti gli elementi tranne il primo
f[2:4]        # seleziona gli elementi dal secondo al quarto, estremi compresi
f[-(2:4)]     # seleziona tutti gli elementi tranne quelli dal secondo al quarto
f[c(2,4)]     # seleziona il secondo e quarto elemento
f[-c(2,4)]    # seleziona tutti gli elementi tranne il secondo e il quarto

g <- c(3,5)
f[g]          # seleziona il terzo e quinto elemento
f[-g]         # seleziona tutti gli elementi tranne il terzo e il quinto
f[is.na(f)]   # seleziona solo gli elementi NA
f[!is.na(f)]  # seleziona solo gli elementi non NA
```

Per verificare se un oggetto è un vettore si può usare la funzione `is.vector()`, mentre per conoscerne il numero di elementi si usa la funzione `length()`.

Con i vettori possiamo iniziare a fare qualche calcolo con funzioni quali `max()`, `min()`, `sum()`, `mean()`, `median()`, `quantile()`, `which.min()` e `which.max()` e molte altre.

Spesso è utile generare vettori casuali; a tale scopo, le funzioni forse più usate sono `sample()` e `rnorm()`. La prima estrae un numero casuale di elementi da un vettore, la seconda genera valori da una distribuzione normale con parametri noti. Esempio:

```{r}
sorprendimi <- sample(1:1000, 30, replace = TRUE) # 30 valori indipendenti da 1 a 1000.
max(sorprendimi)                                  # trova il valore massimo
which.max(sorprendimi)                            # trova la posizione del valore massimo
m <- which.max(sorprendimi)
sorprendimi[m]
max(sorprendimi) == sorprendimi[m]                # funziona!

rnorm(1000, mean = 10, sd = 3) |>                 # la pipe per concatena le funzioni
  hist()
```

Gli elementi di un vettore possono essere associati a un nome tramite l'attributo `names()`:

```{r}
g
names(g) <- c("tre", "cinque")
g
names(g) <- NULL
g
```

### Matrici ed array

La naturale estensione dei vettori sono le matrici e gli array multidimensionali, creati organizzando i vettori su righe e colonne.

L'estrazione di elementi da una matrice avviene con la notazione `matrice[righe, colonne]`, come mostrato nell'esempio riportato di seguito:

```{r}
matrice <- matrix(1:100, nrow = 20)
matrice[5:7, 3:5]
matrice[, 3]
```

Si può determinare e modificare la dimensione di una matrice con il comando `dim()`:

```{r}
dim(matrice)
dim(matrice) <- c(5, 20)
```

Su vettori e matrici di tipo numerico è possibile eseguire operazioni di algebra lineare, come il prodotto righe per colonne, utilizzando l'operatore `%*%`, o il calcolo dell'inversa con il comando `inv()` del pacchetto `MASS`. Tuttavia, raramente sarà necessario eseguire queste operazioni manualmente, poiché numerosissimi algoritmi sono già implementati in modo molto efficiente in funzioni e pacchetti dedicati.

### Fattori

Un fattore è un tipo di dato che può assumere solo valori finiti e noti. Ad esempio, il colore dei capelli dei bambini di una classe è un fattore, così come le tipologie di acque analizzate dal laboratorio (acque di mare, potabili, sotterranee, ecc.). I valori distinti che un fattore può assumere si chiamano livelli.

Gli esempi di fattori visti in precedenza non sono ordinati, ma alcuni possono esserlo, come i giudizi di un esame: insufficiente, sufficiente, buono, distinto, ottimo.

Internamente, R tratta i fattori come interi a cui associa etichette di testo. Per i fattori ordinati, gli interi seguono l’ordine specificato durante la definizione dei livelli; per i fattori non ordinati, gli interi sono assegnati in ordine alfabetico o di apparizione. Esempio:

```{r}
terza_c <- c("ottimo", "ottimo", "buono", "insufficiente", "buono", "buono")

# fattore senza specifica dei livelli
factor(terza_c)

# fattore con livelli specificato ma non ordinati
factor(terza_c,
       levels = c("insufficiente", "sufficiente", "buono", "distinto", "ottimo"))

# fattore ordinato
factor(terza_c,
       ordered = TRUE,
       levels = c("insufficiente", "sufficiente", "buono", "distinto", "ottimo"))

```

### Liste

I contenitori visti finora sono ottimi per raggruppare elementi della stessa tipologia. Le liste, invece, permettono di raggruppare elementi di tipi diversi mantenendoli comunque ordinati:

```{r}
lista <- list(numeri = 1:20,
              testo = c("pippo", "ciccio", "riccio"),
              giudizi = terza_c,
              matrice = matrice)
str(lista)
```

Per accedere alla struttura di una lista si usa il comando `str()`, utile anche con altri tipi di contenitori.

I singoli gruppi si estraggono per posizione con la sintassi `lista[[gruppo]]` o per nome con la sintassi `lista$gruppo`. All'interno del gruppo posso accedere ai singoli elementi come visto nelle sezioni precedenti:

```{r}
lista[[2]]
lista$testo
lista$testo[2]
lista[[4]][2,]
lista[[4]][2,3]
lista[[3]] <- NULL
```

### Data frames {#sec-df}

I `data.frame` sono tabelle di dati che possono contenere colonne di diverse tipologie. Rispetto alle liste, offrono una maggiore facilità di consultazione, ma non permettono di immagazzinare gruppi di diversa lunghezza. Sono la tipologia di dati più frequentemente utilizzata.

Internamente, R tratta le colonne di un `data.frame` come gruppi di una lista.

Esempio con il dataset `iris`:
```{r}
str(iris)
```

Creazione e modifica di un data frame:
```{r}
df <- data.frame(lettere = c("a", "b", "c", "d", "e", "f"),
                 interi = 1:6,
                 numeri = rnorm(6))
df$numeri
df$lettere[3]
df$lettere[3] <- "g"
df$sopra3 <- df$interi > 3
df$interi <- NULL
```

I nomi delle colonne si estraggono o modificano con la funzione `colnames()`:

```{r}
colnames(df)
colnames(df)[3] <- "random"
```

I `data.frame` possono anche avere nomi per ogni riga, ma è consigliabile evitarlo.

La sintassi base di R rende spesso complicato filtrare o eseguire operazioni complesse sui data frame. Per questo motivo sono nati pacchetti dedicati, tra cui:

- `dplyr` permette di manipolare i dati concatenando funzioni con nomi descrittivi come `filter()`, `mutate()`, `group_by()`, ecc.
- `data.table` nato per la manipolazione efficiente di grandi quantità di dati, propone una sintassi estesa rispetto a quella base di R: lo vedremo nel prossimo capitolo.

:::: {.panel-tabset}

## Esercizio

Piero ha effettuato 10 prove indipendenti per la misura della concentrazione di nitrati su un campione di acqua, ottenendo i seguenti risultati: 0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98 mg/l. Una delle prove non ha dato risultati validi.

- creare uno script contenente commenti esplicativi di ogni passaggio;
- calcolare media, deviazione standard e intervallo di confidenza ($\alpha$ = 0.95).

Pina ha preparato altre 10 prove indipendenti dello stesso campione di acqua per la misura della concentrazione di nitrati, ottenendo i seguenti risultati: 1.09, 0.89, 0.74, 1.07, 0.68, 0.89, 1.25, 1.10, 0.86, 0.88 mg/l.

- ampliare lo script sviluppato nell'esercizio precedente;
- unire i risultati ottenuti dai due operatori nello stesso oggetto di R;
- calcolare gli intervalli di confidenza per ciascun operatore;
- Valutare statisticamente la presenza di differenze significative tra i valori ottenuti dai due operatori.

Per praticità, assumiamo che:
- i dati seguano una distribuzione normale;
- le varianze dei due gruppi siano omogenee.


## Soluzione

```{r}
# 1
piero <- c(0.77, 0.69, 0.89, 0.75, 0.93, 0.81, 0.91, 1.06, 0.98, NA)
mean(piero, na.rm = TRUE)
sd(piero, na.rm = TRUE)
n <- piero[!is.na(piero)] |> length() # immaginate un altro modo

ci <- function(data, alfa = 0.975){
  stopifnot(is.numeric(data))
  stopifnot(is.numeric(alfa))
  stopifnot(alfa > 0 &  alfa <= 1)
  
  n <- sum(!is.na(data))
  dof <- n - 1
  avg <- mean(data, na.rm = TRUE)
  std_error <- sd(data, na.rm = TRUE) / sqrt(n)
  t_val <- qt(alfa, dof)
  
  avg + c(-1, +1) * t_val * std_error
}

ci(piero)

# 2
# In seguito vedremo come questo modo di organizzare i dati non sia ottimale
risultati <- data.frame(piero = piero,
                        pina = c(1.09, 0.89, 0.74, 1.07, 0.68,
                                 0.89, 1.25, 1.10, 0.86, 0.88))
lapply(risultati, ci)
t.test(risultati$piero, risultati$pina)
```
::::