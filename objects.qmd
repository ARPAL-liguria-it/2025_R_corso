#  Oggetti di R {#sec-objects}

```{r}
#| echo: false
source("_common.R")
```

## Tipologie di elementi {#sec-typeof}

Prima di vedere le classi di oggetti di R, che possiamo pensare come diverse tipologie di contenitori, è bene dare una rapida occhiata alla tipologia di elementi che possiamo mettere in tali contenitori.

Quando saremo in dubbio sulla tipologia di un dato elemento possiamo usare la funzione `typeof()`.

### Numeri

R ha la possibilità di gestire diverse tipologie di numeri, tuttavia noi useremo principalmente la tipologia `double` che abbrevia il nome *double-precision floating-point format*: che definisce come in informatica vengono archiviati e manipolati gli elementi esprimibili con una parte decimale. Ogni misura - con l'esclusione dei conteggi puri - anche una che dovesse avere valore 5, ricade in questa tipologia. Utilizzare questa tipologia di elementi è semplice:

```{r}
a <- c(2, 2.1, 2.5)
```

Più raramente dovremo definire degli interi. Essi afferiscono alla tipologia `integer` e si scrivono facendo seguire una L maiuscola al numero:

```{r}
b <- c(1L, 5L)
```

Altre tipologie di numeri più esotiche comprendono i tipi `complex` e `raw`, rispettivamente per numeri complessi e bytes: non li useremo.

Numeri particolari che possiamo ottenere a seguito di operazioni matematiche sono `NaN`: *not a number*, `Inf` e `-Inf`: il primo è ottenibile, ad esempio, dividendo zero per zero mentre gli ultimi rispettivamente dividendo un numero positivo o negativo per zero. Si può testare se un numero sia `NaN` o `Inf` rispettivamente con le funzioni `is.nan()` e `is.infinite()`.

### Testo

R mette a disposizione una singola tipologia per le stringhe di testo: indipendentemente dalla loro lunghezza saranno tutte `character` e si scrivono racchiudendo i diversi elementi tra singole o doppie virgolette alte (nel corso utilizzeremo sempre le doppie virgolette):

```{r}
c <- "roba"
```

Talvolta i numeri possono anche essere archiviati come testo, ad esempio `r d <- c("1", "2")`, tuttavia si tratta perlopiù di un risultato indesiderato ma abbastanza frequente quando vengono importati dati non ben ripuliti: vedremo e rimedieremo a casi di questo tipo nei prossimi capitoli.

### Logici

Gli elementi logici sono quelli che possono assumere esclusivamente valore `TRUE` o `FALSE`: difficilmente vengono assegnati a mano in una variabile ma compaiono spesso a seguito di un'operazione logica:

```{r}
d <- 3 < 5
d
typeof(d)

e <- 3 == 3L
```

### Elementi mancanti ed elementi nulli

R identifica gli elementi mancanti con `NA`: *not available*. `NA` rappresenta una tipologia particolare in quanto diventa di tipo testo, numero o logico a seconda di dove si trova. Tipicamente, operazioni eseguiti su gruppi di elementi dove uno o più di essi sono `NA`, danno risultato `NA`.
Si può verificare se un elemento è di tipo `NA` con la funzione `is.na()`.

Talvolta, R può restituire un elemento di tipo `NULL` estraendo un elemento che non esiste da un qualche oggetto. Più comunemente, è possibile assegnare il valore `NULL` a un oggetto per eliminarne il contenuto:

```{r}
c()

a
a <- NULL
a
```

## Vettori

Un vettore è un insieme di valori non ordinati, tutti appartenenti alla stessa tipologia. Tutte le variabili create nella sezione @sec-typeof sono esempi di vettori: anche se alcuni contengono solo numeri, testo o valori logici, essi non contengono mai elementi ascrivibili a più di una tipologia e possiedono una sola dimensione.

Posso accedere ai diversi elementi di un vettore attraverso la notazione `vettore[indici]` dove `indici` è a sua volta un vettore di elementi da includere o escludere:

```{r}
f <- c("a", "b", "c", NA, "e")
f[1] # seleziono solo il primo elemento
f[-1] # seleziono tutti gli elementi tranne il primo
f[2:4] # seleziono gli elementi dal secondo al quarto, estremi compresi
f[-(2:4)] # seleziono tutti gli elementi tranne quelli dal secondo al quarto
f[c(2,4)] # seleziono il secondo e quarto elemento
f[-c(2,4)] # seleziono tutti gli elementi tranne il secondo e il quarto
g <- c(3,5)
f[g] # seleziono il terzo e quinto elemento
f[-g] # seleziono tutti gli elementi tranne il terzo e il quinto
f[is.na(f)] # seleziono solo gli elementi NA
f[!is.na(f)] # seleziono solo gli elementi non NA
```

Per verificare se ho a che fare con un vettore posso usare la funzione `is.vector()`, mentre per determinare quanti elementi contenga uso la funzione `length()`.

Con i vettori possiamo iniziare a fare qualche conto con funzioni quali `max()`, `min()`, `sum()`, `mean()`, `median()`, `quantile()`, `which.min()` e `which.max()` e molte altre.

Di sovente può essere utile generare vettori casuali e a tale scopo le funzioni forse più usate sono `sample()` e `rnorm`()`: la prima può estrarre un numero casuale di elementi da un vettore, la seconda può estrarre un numero arbitrario di valori da una distribuzione normale con parametri noti. Facciamo qualche prova:

```{r}
sorprendimi <- sample(1:1000, 30, replace = TRUE) # estraggo 30 valori tra loro indipendenti dagli interi da 1 a 1000.
max(sorprendimi) # trovo il valore massimo
which.max(sorprendimi) # trovo la posizione in cui si trova il valore massimo
m <- which.max(sorprendimi)
sorprendimi[m]
max(sorprendimi) == sorprendimi[m] # funziona!

rnorm(1000, mean = 10, sd = 3) |> # uso la pipe per concatenare le funzioni
  hist()
```

Gli elementi di un vettore possono essere associati a un nome agendo sull'attributo `names()` di tale vettore.

```{r}
g
names(g) <- c("tre", "cinque")
g
names(g) <- NULL
g
```

## Matrici ed array

La naturale estensione dei vettori sono le matrici e gli array multidimensionali.
Si creano essenzialmente partendo da vettori e organizzandoli su righe e colonne.

L'estrazione di elementi dalla matrice avviene con la notazione `matrice[righe, colonne]`, come mostrato nell'esempio riportato di seguito:

```{r}
matrice <- matrix(1:100, nrow = 20)
matrice[5:7, 3:5]
```

Su vettori e matrici è possibile eseguire tutte le operazioni dell'algebra lineare, come il prodotto righe per colonne, utilizzando l'operatore `%*%`.
