# Introduzione {#sec-intro}

```{r}
#| echo: false
source("_common.R")
```

Lo scopo del corso è fornire gli strumenti necessari per eseguire semplici analisi dei dati utilizzando il linguaggio R.

Al termine del corso, realizzerai una piccola analisi guidata, mettendo in pratica quanto imparato e creando un documento completo e autonomo.

Durante il proseguo del corso imparerai a:

-   chiedere aiuto;
-   strutturare un documento alternando testo e codice per rendere le analisi riproducibili;
-   importare dati da file esterni all'interno di R;
-   immagazzinare, consultare e modificare i dati all'interno delle diverse tipologie di oggetti di R;
-   trasformare e combinare i dati;
-   utilizzare i nostri dati per ottenere informazioni statistiche di base;
-   creare semplici grafici.

## Quanta fatica

L'utilizzo di un linguaggio di programmazione richiede un importante investimento iniziale per apprenderne le basi, le funzioni principali e il loro campo di applicazione. Tuttavia, l'impegno profuso viene ampiamente ripagato dalla possibilità di riutilizzare e adattare il codice, nonché di ripetere le analisi con poco sforzo, rendendo l'intero processo riproducibile e documentabile.

Inoltre, imparare un linguaggio di programmazione apre numerose porte e può semplificare il lavoro quotidiano in molti ambiti. Per esempio, con R è possibile realizzare:

-   documenti dinamici parametrizzati;
-   applicazioni interattive accessibili via browser;
-   interfacce di programmazione (API) per l'esecuzione di funzioni da remoto.

## Prerequisiti

Il corso è aperto a chiunque abbia una certa dimestichezza con il computer e una conoscenza di base della logica. Il candidato ideale ha già svolto qualche analisi su dati numerici, utilizzando strumenti statistici di base e fogli di calcolo. La conoscenza di un linguaggio di programmazione diverso da R non è necessaria, ma sicuramente rappresenta un vantaggio.

Per eseguire il codice presentato durante il corso, è necessario installare R, RStudio e i seguenti pacchetti `data.table`, `readxl`, `ggplot2`, `glue` e `gt`.

### R

R può essere scaricato dal *Comprensive R Archive Network* ([CRAN](https://cloud.r-project.org/)), seguendo le istruzioni relative al proprio sistema operativo. Ogni anno viene rilasciata una nuova versione principale, accompagnata da circa tre aggiornamenti minori: se si intende usare R regolarmente, è consigliabile mantenere il software aggiornato.

R è un software libero, distribuito sotto una combinazione di licenze GNU General Public License v2 e v3 e GNU Lesser General Public License v2.1.

### RStudio

RStudio è l'ambiente di sviluppo integrato (IDE) più diffuso per R: permette la gestione completa di un progetto, la connessione a sorgenti dati esterne come database e l'integrazione con sistemi di gestione delle versioni come `git`. Può essere scaricato dal sito ufficiale di [Posit](https://posit.co/download/rstudio-desktop/).

Anche RStudio è un software libero, rilasciato sotto licenza GNU Affero General Public License v3.

```{r}
#| label: fig-rstudio-console
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Schermata di RStudio: in alto, da sinistra a destra, si trova il pannello dedicato al codice
#|   sorgente, al suo fianco il pannello dedicato agli ambienti e allo storico.
#|   In basso, da sinistra a destra, si trova la console e il pannello dedicato agli output.
#| fig-alt: |
#|   Schermata di Rstudio.
knitr::include_graphics("images/rstudio.png", dpi = 72)
```


L'uso di RStudio o di un altro IDE non è strettamente necessario per utilizzare R, ma ne semplifica notevolmente l'impiego. Altri IDE comunemente utilizzati con R sono Visual Studio Code, Vim ed Emacs.

### I pacchetti di R

Le funzionalità di R possono essere ampliate tramite pacchetti. La lista completa, molto ampia e variegata, è presente sul sito del [CRAN](https://cran.r-project.org/web/packages/available_packages_by_date.html). Alcuni di questi pacchetti sono sviluppati da appassionati, altri da statistici e ingegneri del software di fama mondiale. Tutte le funzioni e i dati contenuti in un pacchetto sono documentati, il codice sorgente è completamente consultabile e spesso è possibile collaborare direttamente allo sviluppo su piattaforme come GitHub. Molti pacchetti sono inoltre collegati a libri di testo o articoli scientifici.

I pacchetti si installano in R con il comando:

```{r}
#| eval: false
#| output: false
install.packages("pacchetto")
```

Durante il corso utilizzeremo alcuni pacchetti molto diffusi:

- `data.table`: consente di caricare e manipolare efficientemente grandi insiemi di dati, con una sintassi particolare ma intuitiva;
- `ggplot2`: il pacchetto di riferimento per la creazione di grafici;
- `readxl`: utile per importare dati da fogli Excel;
- `glue`: semplifica la concatenazione di stringhe, anche se lo useremo raramente in modo diretto;
- `gt`: utilizzato per produrre tabelle di alta qualità. Le tabelle che vedrete nel corso saranno realizzate con questo pacchetto, anche se raramente lo useremo direttamente;
- `R.utils`: lo utilizzeremo solo per importare dati da file gz.

Installiamo i pacchetti richiesti racchiudendoli all'interno di un vettore con il comando `c()` e scrivendo il seguente comando all'interno della console di R, dopo il simbolo `>`:

```{r}
#| output: false

install.packages(c("data.table", "readxl", "ggplot2", "glue", "gt", "R.utils"))
```

Quando ne avremo bisogno saremo pronti a caricare e usare tali pacchetti.

## Per approfondire

Se il materiale presentato nel corso non fosse sufficiente o non rispondesse pienamente alle vostre esigenze, in rete è possibile trovare numerosi testi gratuiti di alta qualità. Tra questi si segnalano:

- [Hands-On Programming with R](https://rstudio-education.github.io/hopr/) scritto da Garrett Grolemund;
- [R for Data Science](https://r4ds.hadley.nz/) scritto da Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund;
- [Advanced R](https://adv-r.hadley.nz/) scritto da Hadley Wickham.