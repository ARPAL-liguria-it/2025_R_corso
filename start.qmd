# Il primo assaggio {#sec-basics}

```{r}
#| echo: false
source("_common.R")
```

## Una bella calcolatrice

Iniziamo a prendere confidenza con la console di R, utilizzandola come una calcolatrice e scriviamo

```{r}
#| eval: true

2 + 3
```

R, in tutta la sua potenza, dovrebbe produrre

```         
[1] 5
```

significa che il risultato Ã¨ un vettore formato da un elemento e tale elemento Ã¨ pari a 5.

Possiamo anche fare calcoli multipli: definiamo un vettore di 100 elementi che riporti tutti gli interi da 1 a 100 e a ognuno dei suoi elementi aggiungiamo 2.

```{r}
#| eval: true

1:100 + 2
```

Se volessimo ripetere il calcolo ma aggiungendo 3 invece di due, possiamo cliccare sulla console, schiacciare il tasto ðŸ”¼, visualizzando l'ultimo comando eseguito, cambiare il 2 in 3 e dare invio. Tuttavia Ã¨ meglio assegnare il vettore contenente i 100 elementi a una variabile che chiameremo `a`, cosÃ¬ da richiamarla in seguito e fare altri calcoli.

```{r}
#| eval: true

a <- 1:100
```

a questo punto

```{r}
#| eval: true

a + 3
```

Posso usare la variabile definita poco sopra per fare altri calcoli. Per esempio, posso elevare alla seconda tutti gli elementi associati alla variabile `a`:

```{r}
#| eval: true

a^2
```

Il valore di una variabile puÃ² essere sovrascritto con una nuova assegnazione, come nel caso riportato di seguito:

```{r}
#| eval: true

a <- "Bella zio: sto usando R!"
```

Nella creazione di variabili Ã¨ bene fare caso ad alcune regole:

- R Ã¨ *case sensitive* e quindi `f` ed `F` saranno due diverse variabili;
- non sono ammesse variabili che iniziano con numeri (come `1variabile`);
- non sono ammessi caratteri diversi da lettere, numeri e *underscore*, compresi gli spazi;
- sono ammessi caratteri accentati ma complicano molto la vita.

Durante il corso utilizzeremo nomi di variabili e funzioni scritte in caratteri minuscoli e senza lettere accentate, utilizzando gli *underscore* al posto degli spazi (notazione *snake_case*).

## Funzioni

Le funzioni sono una parte fondamentale di R e consentono di eseguire una serie di operazioni dati degli *input*, per ottenere nessuno, uno o piÃ¹ *output*: si tratta di una definizione generica perchÃ© sono elementi estremamente generici e incontreremo funzioni pressochÃ© ovunque. Durante il corso non adotteremo la distinzione tra funzioni e metodi, dove le prime danno *output* e le seconde no: per noi qualunque contenitore di operazioni che vengano applicate a un *input* sarÃ  una funzione.

R permette giÃ  di utilizzare diverse funzioni. Possiamo assegnare alcuni numeri a una variabile e applicare a essi la funzione somma:

```{r}
#| eval: true

b <- c(2, 3, 5)
sum(b)
```

Gli input delle funzioni vengono specificati all'interno delle parentesi tonde, ci sono funzioni che richiedono pochi *input* e altre che ne richiedono di piÃ¹, nella prossima sezione vedremo come acquisire informazioni sull'utilizzo di una funzione.

Oltre alle funzioni giÃ  disponibili, possiamo scrivere delle funzioni personalizzate. Scrivere funzioni efficienti, robuste e ben documentate richiede pratica, perÃ² la sintassi di base Ã¨:

```{r}
#| eval: true
#| error: true

# la funzione fammi_il_caffe prende come argomenti due stringa di caratteri
# la prima definisce il tipo e puÃ² essere caffÃ¨ o orzo
# la seconda definisce la modalitÃ  e puÃ² essere corto, lungo e macchiato
# l'output Ã¨ una stringa di testo
fammi_il_caffe <- function(tipo = "caffÃ¨",
                           modo = "corto"){
  # controllo che l'input abbia le caratteristiche desiderate
  stopifnot(is.character(tipo))
  stopifnot(is.character(modo))
  stopifnot(tipo %in% c("caffÃ¨", "orzo"))
  stopifnot(modo %in% c("corto", "lungo", "macchiato"))
  
  # determino il prezzo scegliendo un numero casuale tra 1 e 2 con intervallo 0.1
  prezzo <- sample(seq(from = 1, to = 2, by = 0.1), 1)
  # formatto il caffÃ© e il prezzo
  prodotto_txt <- paste("Ecco a lei il suo", tipo, modo, sep = " ")
  prezzo_txt <- paste("Sono", prezzo, "â‚¬.", sep = " ")
  
  # il risultato Ã¨ l'ultimo comando della funzione
  paste(prodotto_txt, prezzo_txt, sep = ". ")
}

# utilizzo la funzione
fammi_il_caffe()
fammi_il_caffe("orzo", "lungo")
fammi_il_caffe("orzo", "corretto")
```

Gli argomenti o *input* della funzione sono racchiusi tra parentesi tonde, con il loro eventuale valore predefinito dichiarato dopo l'uguale. Il corpo della funzione Ã¨ racchiuso tra parentesi graffe e tipicamente contiene una parte di validazione degli argomenti, il cui scopo Ã¨ assicurarsi che la funzione non venga utilizzata al di fuori del suo ambito di utilizzo, una parte in cui vengono sviluppati i conti e una parte finale contenente il risultato.

## Il primo script

Nella sezione precedente abbiamo visto codice che spazia su piÃ¹ righe: inserirlo riga per riga nella console inizia ad essere scomodo e si rischia di dimenticare cosa si Ã¨ fatto poche righe prima.

Possiamo creare un file.R in cui elencare in ordine di esecuzione i comandi che vogliamo eseguire.
Per farlo Ã¨ sufficiente cliccare l'icona ![](images/newfile.png){height=25} in alto a sinistra in RStudio, selezionare Rscript e quindi salvare il file. All'interno di tale file possiamo scrivere le seguenti istruzioni:

```{r}
#| echo: false
# richiamo un dataset di R
iris

# ho visto che il dataset Ã¨ composto da misurazioni di lunghezze e larghezze di
# petali e sepali di tre diverse specie di iris. Le specie considerate sono
# setosa, versicolor e virginica: per ogni specie sono presenti 50 record.

# faccio un grafico tra coppie di variabili
plot(iris, col = iris$Species)

# noto che le misurazioni relative a una specie sono ben distinte dalle altre due,
# quest'ultime mostrano un certo grado di sovrapposizione. Vediamo se il calcolo
# dei quartili eseguita sulle singole variabili per i diversi gruppi mi aiuta a
# identificare i gruppi che mostrano sovrapposizione parziale nelle misure.

# definisco una funzione per il calcolo dei quartili a partire da generici
# percentili
quartili <- function(valori){
  stopifnot(is.vector(valori))
  
  # uso la funzione predefinita quantile
  quantile(valori, probs = c(0.25, 0.50, 0.75))
}

# la funzione aggregate divide una serie di dati in gruppi, applica la funzione
# desiderata a ogni gruppo e poi ricombina i risultati
aggregate(. ~ Species, data = iris, FUN = quartili)

# la specie setosa risulta ben disinguibile dalle specie versicolor e virginica,
# quest'ultime mostrano dimensioni simili.
# Le variabili che permettono di distinguere meglio le tre specie sono 
# la lunghezza e la larghezza dei petali.
```


Con gli script Ã¨ possibile tenere traccia di cosa Ã¨ stato fatto, commentando il codice per renderlo maggiormente comprensibile a se stessi e ai colleghi: d'ora in poi gli script saranno il nostro principale strumento di lavoro. Vedremo poi nei prossimi capitoli un modo per includere gli script in un documento finito, migliorando ulteriormente la riproducibilitÃ  di un'analisi.

## Chiedere aiuto

Questa Ã¨ la sezione piÃ¹ importante dell'intero corso in quanto permette di capire come muoversi sulle proprie gambe, cadendo senza farsi troppo male e tentando di rialzarsi.

R offre un ottimo aiuto in linea: ogni pacchetto, dataset e funzione Ã¨ documentata, contiene quindi tutte le informazioni necessarie a definirne gli ambiti e modi di utilizzo. Per accedere a queste informazioni Ã¨ sufficiente anteporre un `?` all'elemento del quale si desidera sapere di piÃ¹:

```{r}
#| output: false
?sum()
?iris
```

Se l'elemento di cui si vuole sapere di piÃ¹ Ã¨ presente in un pacchetto noto ma non attualmente caricato, sarÃ  necessario specificare il pacchetto a cui appartiene l'elemento:

```{r}
#| output: false
?ggplot2::geom_point()
```

Se l'elemento di cui si vuole sapere di piÃ¹ Ã¨ presente in un pacchetto ignoto, installato ma non attualmente caricato, si puÃ² lanciare una ricerca tra i pacchetti installati nel sistema anteponendo `??` all'elemento stesso e poi selezionando la voce di interesse:

```{r}
#| output: false
??geom_point()
```

All'interno della sezione *help* Ã¨ presente una descrizione iniziale dell'elemento e, se si tratta di una funzione, dei diversi *input* richiesti, seguono poi sezioni in cui viene spesso spiegato il funzionamento delle funzione, per finire con utili esempi d'uso.

A volte, potrebbe non essere sufficiente ricorrere all'aiuto in linea, in tal caso si consiglia di rivolgersi a Google o qualche large language model (LLM) come DeepSeek, ChatGPT o Perplexity. Quest'ultimi strumenti di intelligenza artificiale permettono, a fronte di richieste dettagliate e ben strutturate di farsi scrivere e spiegare interi programmi, anche complessi, richiedendo poche rifiniture manuali.

Alternativi e complementari all'uso di strumenti di intelligenza artificiale, sono presenti forum dedicati alla programmazione e con una folta comunitÃ  di preparatissimi (e spesso burberi) utilizzatori di R. Tra questi forum [StackOverflow](https://stackoverflow.com/questions) risulta particolarmente ricco di spunti e risorse. Per utilizzarlo al meglio:

-   cercate con cura se la vostra domanda sia giÃ  stata posta in passato;
-   prendete spunto da domande simili per strutturare con cura la vostra richiesta;
-   create un esempio minimo riproducibile (*reprex*).

L'ultimo punto ha lo scopo di rendere il vostro codice riproducibile e facilmente leggibile da chi vi dovrÃ  aiutare: inserite nel codice tutte le librerie e variabili usate e togliete tutto quanto non Ã¨ indispensabile per riprodurre il problema su cui state chiedendo aiuto.

:::: {.panel-tabset}

## Esercizio

- Documentarsi sull'utilizzo della funzione `aggregate`;
- calcolare la media di tutte le quattro tipologie di misure delle tre specie nel dataset `iris`.

## Soluzione

```{r}
?aggregate()    # 1.
aggregate(. ~ Species, data = iris, FUN = mean)    # 2.
```
::::